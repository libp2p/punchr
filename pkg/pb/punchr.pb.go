// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: punchr.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HolePunchOutcome int32

const (
	HolePunchOutcome_HOLE_PUNCH_OUTCOME_UNKNOWN HolePunchOutcome = 0
	// Could not connect to remote peer via relay
	HolePunchOutcome_HOLE_PUNCH_OUTCOME_NO_CONNECTION HolePunchOutcome = 1
	// Hole punch was not initiated by the remote peer
	// because the /libp2p/dcutr stream was not opened.
	HolePunchOutcome_HOLE_PUNCH_OUTCOME_NO_STREAM HolePunchOutcome = 2
	// Conditions:
	//  1. /libp2p/dcutr stream was not opened.
	//  2. We connected to the remote peer via a relay
	//  3. We have a direct connection to the remote peer after we have waited for the libp2p/dcutr stream.
	//
	// Should actually never happen on our side.
	HolePunchOutcome_HOLE_PUNCH_OUTCOME_CONNECTION_REVERSED HolePunchOutcome = 3
	// Hole punch was cancelled by the user
	HolePunchOutcome_HOLE_PUNCH_OUTCOME_CANCELLED HolePunchOutcome = 4
	// The hole punch was attempted several times but failed
	HolePunchOutcome_HOLE_PUNCH_OUTCOME_FAILED HolePunchOutcome = 5
	// The hole punch was performed and successful
	HolePunchOutcome_HOLE_PUNCH_OUTCOME_SUCCESS HolePunchOutcome = 6
)

// Enum value maps for HolePunchOutcome.
var (
	HolePunchOutcome_name = map[int32]string{
		0: "HOLE_PUNCH_OUTCOME_UNKNOWN",
		1: "HOLE_PUNCH_OUTCOME_NO_CONNECTION",
		2: "HOLE_PUNCH_OUTCOME_NO_STREAM",
		3: "HOLE_PUNCH_OUTCOME_CONNECTION_REVERSED",
		4: "HOLE_PUNCH_OUTCOME_CANCELLED",
		5: "HOLE_PUNCH_OUTCOME_FAILED",
		6: "HOLE_PUNCH_OUTCOME_SUCCESS",
	}
	HolePunchOutcome_value = map[string]int32{
		"HOLE_PUNCH_OUTCOME_UNKNOWN":             0,
		"HOLE_PUNCH_OUTCOME_NO_CONNECTION":       1,
		"HOLE_PUNCH_OUTCOME_NO_STREAM":           2,
		"HOLE_PUNCH_OUTCOME_CONNECTION_REVERSED": 3,
		"HOLE_PUNCH_OUTCOME_CANCELLED":           4,
		"HOLE_PUNCH_OUTCOME_FAILED":              5,
		"HOLE_PUNCH_OUTCOME_SUCCESS":             6,
	}
)

func (x HolePunchOutcome) Enum() *HolePunchOutcome {
	p := new(HolePunchOutcome)
	*p = x
	return p
}

func (x HolePunchOutcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HolePunchOutcome) Descriptor() protoreflect.EnumDescriptor {
	return file_punchr_proto_enumTypes[0].Descriptor()
}

func (HolePunchOutcome) Type() protoreflect.EnumType {
	return &file_punchr_proto_enumTypes[0]
}

func (x HolePunchOutcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HolePunchOutcome) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HolePunchOutcome(num)
	return nil
}

// Deprecated: Use HolePunchOutcome.Descriptor instead.
func (HolePunchOutcome) EnumDescriptor() ([]byte, []int) {
	return file_punchr_proto_rawDescGZIP(), []int{0}
}

type HolePunchAttemptOutcome int32

const (
	HolePunchAttemptOutcome_HOLE_PUNCH_ATTEMPT_OUTCOME_UNKNOWN HolePunchAttemptOutcome = 0
	// Should never happen on our side. This happens if
	// the connection reversal from our side succeeded.
	HolePunchAttemptOutcome_HOLE_PUNCH_ATTEMPT_OUTCOME_DIRECT_DIAL HolePunchAttemptOutcome = 1
	// Can happen if, e.g., the stream was reset mid-flight
	HolePunchAttemptOutcome_HOLE_PUNCH_ATTEMPT_OUTCOME_PROTOCOL_ERROR HolePunchAttemptOutcome = 2
	// The overall hole punch was cancelled by the user
	HolePunchAttemptOutcome_HOLE_PUNCH_ATTEMPT_OUTCOME_CANCELLED HolePunchAttemptOutcome = 3
	// The /libp2p/dcutr stream was opened but the hole punch was not initiated in time
	HolePunchAttemptOutcome_HOLE_PUNCH_ATTEMPT_OUTCOME_TIMEOUT HolePunchAttemptOutcome = 4
	// The hole punch was performed but has failed
	HolePunchAttemptOutcome_HOLE_PUNCH_ATTEMPT_OUTCOME_FAILED HolePunchAttemptOutcome = 5
	// The hole punch was performed and was successful
	HolePunchAttemptOutcome_HOLE_PUNCH_ATTEMPT_OUTCOME_SUCCESS HolePunchAttemptOutcome = 6
)

// Enum value maps for HolePunchAttemptOutcome.
var (
	HolePunchAttemptOutcome_name = map[int32]string{
		0: "HOLE_PUNCH_ATTEMPT_OUTCOME_UNKNOWN",
		1: "HOLE_PUNCH_ATTEMPT_OUTCOME_DIRECT_DIAL",
		2: "HOLE_PUNCH_ATTEMPT_OUTCOME_PROTOCOL_ERROR",
		3: "HOLE_PUNCH_ATTEMPT_OUTCOME_CANCELLED",
		4: "HOLE_PUNCH_ATTEMPT_OUTCOME_TIMEOUT",
		5: "HOLE_PUNCH_ATTEMPT_OUTCOME_FAILED",
		6: "HOLE_PUNCH_ATTEMPT_OUTCOME_SUCCESS",
	}
	HolePunchAttemptOutcome_value = map[string]int32{
		"HOLE_PUNCH_ATTEMPT_OUTCOME_UNKNOWN":        0,
		"HOLE_PUNCH_ATTEMPT_OUTCOME_DIRECT_DIAL":    1,
		"HOLE_PUNCH_ATTEMPT_OUTCOME_PROTOCOL_ERROR": 2,
		"HOLE_PUNCH_ATTEMPT_OUTCOME_CANCELLED":      3,
		"HOLE_PUNCH_ATTEMPT_OUTCOME_TIMEOUT":        4,
		"HOLE_PUNCH_ATTEMPT_OUTCOME_FAILED":         5,
		"HOLE_PUNCH_ATTEMPT_OUTCOME_SUCCESS":        6,
	}
)

func (x HolePunchAttemptOutcome) Enum() *HolePunchAttemptOutcome {
	p := new(HolePunchAttemptOutcome)
	*p = x
	return p
}

func (x HolePunchAttemptOutcome) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HolePunchAttemptOutcome) Descriptor() protoreflect.EnumDescriptor {
	return file_punchr_proto_enumTypes[1].Descriptor()
}

func (HolePunchAttemptOutcome) Type() protoreflect.EnumType {
	return &file_punchr_proto_enumTypes[1]
}

func (x HolePunchAttemptOutcome) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HolePunchAttemptOutcome) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HolePunchAttemptOutcome(num)
	return nil
}

// Deprecated: Use HolePunchAttemptOutcome.Descriptor instead.
func (HolePunchAttemptOutcome) EnumDescriptor() ([]byte, []int) {
	return file_punchr_proto_rawDescGZIP(), []int{1}
}

type LatencyMeasurementType int32

const (
	LatencyMeasurementType_TO_RELAY                   LatencyMeasurementType = 0
	LatencyMeasurementType_TO_REMOTE_THROUGH_RELAY    LatencyMeasurementType = 1
	LatencyMeasurementType_TO_REMOTE_AFTER_HOLE_PUNCH LatencyMeasurementType = 2
)

// Enum value maps for LatencyMeasurementType.
var (
	LatencyMeasurementType_name = map[int32]string{
		0: "TO_RELAY",
		1: "TO_REMOTE_THROUGH_RELAY",
		2: "TO_REMOTE_AFTER_HOLE_PUNCH",
	}
	LatencyMeasurementType_value = map[string]int32{
		"TO_RELAY":                   0,
		"TO_REMOTE_THROUGH_RELAY":    1,
		"TO_REMOTE_AFTER_HOLE_PUNCH": 2,
	}
)

func (x LatencyMeasurementType) Enum() *LatencyMeasurementType {
	p := new(LatencyMeasurementType)
	*p = x
	return p
}

func (x LatencyMeasurementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LatencyMeasurementType) Descriptor() protoreflect.EnumDescriptor {
	return file_punchr_proto_enumTypes[2].Descriptor()
}

func (LatencyMeasurementType) Type() protoreflect.EnumType {
	return &file_punchr_proto_enumTypes[2]
}

func (x LatencyMeasurementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LatencyMeasurementType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LatencyMeasurementType(num)
	return nil
}

// Deprecated: Use LatencyMeasurementType.Descriptor instead.
func (LatencyMeasurementType) EnumDescriptor() ([]byte, []int) {
	return file_punchr_proto_rawDescGZIP(), []int{2}
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     []byte   `protobuf:"bytes,1,req,name=client_id,json=clientId" json:"client_id,omitempty"`
	AgentVersion *string  `protobuf:"bytes,2,req,name=agent_version,json=agentVersion" json:"agent_version,omitempty"`
	Protocols    []string `protobuf:"bytes,3,rep,name=protocols" json:"protocols,omitempty"`
	ApiKey       *string  `protobuf:"bytes,4,req,name=api_key,json=apiKey" json:"api_key,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punchr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punchr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_punchr_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterRequest) GetClientId() []byte {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *RegisterRequest) GetAgentVersion() string {
	if x != nil && x.AgentVersion != nil {
		return *x.AgentVersion
	}
	return ""
}

func (x *RegisterRequest) GetProtocols() []string {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *RegisterRequest) GetApiKey() string {
	if x != nil && x.ApiKey != nil {
		return *x.ApiKey
	}
	return ""
}

type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbPeerId *int64 `protobuf:"varint,1,req,name=db_peer_id,json=dbPeerId" json:"db_peer_id,omitempty"`
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punchr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punchr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_punchr_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterResponse) GetDbPeerId() int64 {
	if x != nil && x.DbPeerId != nil {
		return *x.DbPeerId
	}
	return 0
}

// There is a challenge when a single punchr client is hole punching a single remote peer via different multi addresses.
// Sometimes the NAT mapping stays intact and no new hole punch is attempted. We circumvent this by spawning multiple
// libp2p hosts in a single punchr client, each listening on different ports. Hence, when we request a new peer to
// hole punch we transmit the host_id for which we request the hole punch + all other libp2p host ids so that we
// don't get a peer that is handled by another host already.
type GetAddrInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host ID for that the client is requesting a peer to hole punch
	HostId []byte `protobuf:"bytes,1,req,name=host_id,json=hostId" json:"host_id,omitempty"`
	// All host IDs that the client is managing
	AllHostIds [][]byte `protobuf:"bytes,2,rep,name=all_host_ids,json=allHostIds" json:"all_host_ids,omitempty"`
	// An authentication key for this request
	ApiKey *string `protobuf:"bytes,3,req,name=api_key,json=apiKey" json:"api_key,omitempty"`
}

func (x *GetAddrInfoRequest) Reset() {
	*x = GetAddrInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punchr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddrInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddrInfoRequest) ProtoMessage() {}

func (x *GetAddrInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punchr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddrInfoRequest.ProtoReflect.Descriptor instead.
func (*GetAddrInfoRequest) Descriptor() ([]byte, []int) {
	return file_punchr_proto_rawDescGZIP(), []int{2}
}

func (x *GetAddrInfoRequest) GetHostId() []byte {
	if x != nil {
		return x.HostId
	}
	return nil
}

func (x *GetAddrInfoRequest) GetAllHostIds() [][]byte {
	if x != nil {
		return x.AllHostIds
	}
	return nil
}

func (x *GetAddrInfoRequest) GetApiKey() string {
	if x != nil && x.ApiKey != nil {
		return *x.ApiKey
	}
	return ""
}

type GetAddrInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteId       []byte   `protobuf:"bytes,1,req,name=remote_id,json=remoteId" json:"remote_id,omitempty"`
	MultiAddresses [][]byte `protobuf:"bytes,2,rep,name=multi_addresses,json=multiAddresses" json:"multi_addresses,omitempty"`
	Protocols      []int32  `protobuf:"varint,3,rep,name=protocols" json:"protocols,omitempty"`
}

func (x *GetAddrInfoResponse) Reset() {
	*x = GetAddrInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punchr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddrInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddrInfoResponse) ProtoMessage() {}

func (x *GetAddrInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punchr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddrInfoResponse.ProtoReflect.Descriptor instead.
func (*GetAddrInfoResponse) Descriptor() ([]byte, []int) {
	return file_punchr_proto_rawDescGZIP(), []int{3}
}

func (x *GetAddrInfoResponse) GetRemoteId() []byte {
	if x != nil {
		return x.RemoteId
	}
	return nil
}

func (x *GetAddrInfoResponse) GetMultiAddresses() [][]byte {
	if x != nil {
		return x.MultiAddresses
	}
	return nil
}

func (x *GetAddrInfoResponse) GetProtocols() []int32 {
	if x != nil {
		return x.Protocols
	}
	return nil
}

type TrackHolePunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Peer ID of the requesting punchr client
	ClientId []byte `protobuf:"bytes,1,req,name=client_id,json=clientId" json:"client_id,omitempty"`
	// Peer ID of the remote peer that was hole punched
	RemoteId []byte `protobuf:"bytes,2,req,name=remote_id,json=remoteId" json:"remote_id,omitempty"`
	// The multi addresses that were used to attempt a hole punch
	// (the same that got served in the first place via GetAddrInfo)
	RemoteMultiAddresses [][]byte `protobuf:"bytes,3,rep,name=remote_multi_addresses,json=remoteMultiAddresses" json:"remote_multi_addresses,omitempty"`
	// Unix timestamp in nanoseconds of when the connection to the remote peer was initiated
	ConnectStartedAt *uint64 `protobuf:"varint,4,req,name=connect_started_at,json=connectStartedAt" json:"connect_started_at,omitempty"`
	// Unix timestamp in nanoseconds of when the connection to the remote peer via the relay was established (or has failed)
	ConnectEndedAt *uint64 `protobuf:"varint,5,req,name=connect_ended_at,json=connectEndedAt" json:"connect_ended_at,omitempty"`
	// Information about each hole punch attempt
	HolePunchAttempts []*HolePunchAttempt `protobuf:"bytes,6,rep,name=hole_punch_attempts,json=holePunchAttempts" json:"hole_punch_attempts,omitempty"`
	// The multi addresses of the open connections AFTER the hole punch process.
	// This field can be used to track which transport protocols were more successful for hole punching.
	OpenMultiAddresses [][]byte `protobuf:"bytes,7,rep,name=open_multi_addresses,json=openMultiAddresses" json:"open_multi_addresses,omitempty"`
	// Whether the open_multi_addresses contains at least one direct connection
	// to the remote peer.
	HasDirectConns *bool `protobuf:"varint,8,req,name=has_direct_conns,json=hasDirectConns" json:"has_direct_conns,omitempty"`
	// The error that occurred if the hole punch failed
	Error *string `protobuf:"bytes,9,opt,name=error" json:"error,omitempty"`
	// The reason why the hole punch ended (direct dial succeeded, protocol error occurred, hole punch procedure finished)
	Outcome *HolePunchOutcome `protobuf:"varint,10,req,name=outcome,enum=HolePunchOutcome" json:"outcome,omitempty"`
	// Unix timestamp in nanoseconds of when the overall hole punch process ended
	EndedAt *uint64 `protobuf:"varint,11,req,name=ended_at,json=endedAt" json:"ended_at,omitempty"`
	// All multi addresses the client is listening on
	ListenMultiAddresses [][]byte `protobuf:"bytes,12,rep,name=listen_multi_addresses,json=listenMultiAddresses" json:"listen_multi_addresses,omitempty"`
	// An authentication key for this request
	ApiKey *string `protobuf:"bytes,13,req,name=api_key,json=apiKey" json:"api_key,omitempty"`
	// Protocols filtered by
	Protocols []int32 `protobuf:"varint,14,rep,name=protocols" json:"protocols,omitempty"`
	// Information about the relays
	LatencyMeasurements []*LatencyMeasurement `protobuf:"bytes,15,rep,name=latency_measurements,json=latencyMeasurements" json:"latency_measurements,omitempty"`
	// Network information if the network has changed
	NetworkInformation *NetworkInformation `protobuf:"bytes,16,opt,name=network_information,json=networkInformation" json:"network_information,omitempty"`
}

func (x *TrackHolePunchRequest) Reset() {
	*x = TrackHolePunchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punchr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackHolePunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackHolePunchRequest) ProtoMessage() {}

func (x *TrackHolePunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punchr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackHolePunchRequest.ProtoReflect.Descriptor instead.
func (*TrackHolePunchRequest) Descriptor() ([]byte, []int) {
	return file_punchr_proto_rawDescGZIP(), []int{4}
}

func (x *TrackHolePunchRequest) GetClientId() []byte {
	if x != nil {
		return x.ClientId
	}
	return nil
}

func (x *TrackHolePunchRequest) GetRemoteId() []byte {
	if x != nil {
		return x.RemoteId
	}
	return nil
}

func (x *TrackHolePunchRequest) GetRemoteMultiAddresses() [][]byte {
	if x != nil {
		return x.RemoteMultiAddresses
	}
	return nil
}

func (x *TrackHolePunchRequest) GetConnectStartedAt() uint64 {
	if x != nil && x.ConnectStartedAt != nil {
		return *x.ConnectStartedAt
	}
	return 0
}

func (x *TrackHolePunchRequest) GetConnectEndedAt() uint64 {
	if x != nil && x.ConnectEndedAt != nil {
		return *x.ConnectEndedAt
	}
	return 0
}

func (x *TrackHolePunchRequest) GetHolePunchAttempts() []*HolePunchAttempt {
	if x != nil {
		return x.HolePunchAttempts
	}
	return nil
}

func (x *TrackHolePunchRequest) GetOpenMultiAddresses() [][]byte {
	if x != nil {
		return x.OpenMultiAddresses
	}
	return nil
}

func (x *TrackHolePunchRequest) GetHasDirectConns() bool {
	if x != nil && x.HasDirectConns != nil {
		return *x.HasDirectConns
	}
	return false
}

func (x *TrackHolePunchRequest) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *TrackHolePunchRequest) GetOutcome() HolePunchOutcome {
	if x != nil && x.Outcome != nil {
		return *x.Outcome
	}
	return HolePunchOutcome_HOLE_PUNCH_OUTCOME_UNKNOWN
}

func (x *TrackHolePunchRequest) GetEndedAt() uint64 {
	if x != nil && x.EndedAt != nil {
		return *x.EndedAt
	}
	return 0
}

func (x *TrackHolePunchRequest) GetListenMultiAddresses() [][]byte {
	if x != nil {
		return x.ListenMultiAddresses
	}
	return nil
}

func (x *TrackHolePunchRequest) GetApiKey() string {
	if x != nil && x.ApiKey != nil {
		return *x.ApiKey
	}
	return ""
}

func (x *TrackHolePunchRequest) GetProtocols() []int32 {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *TrackHolePunchRequest) GetLatencyMeasurements() []*LatencyMeasurement {
	if x != nil {
		return x.LatencyMeasurements
	}
	return nil
}

func (x *TrackHolePunchRequest) GetNetworkInformation() *NetworkInformation {
	if x != nil {
		return x.NetworkInformation
	}
	return nil
}

type TrackHolePunchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TrackHolePunchResponse) Reset() {
	*x = TrackHolePunchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punchr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackHolePunchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackHolePunchResponse) ProtoMessage() {}

func (x *TrackHolePunchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punchr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackHolePunchResponse.ProtoReflect.Descriptor instead.
func (*TrackHolePunchResponse) Descriptor() ([]byte, []int) {
	return file_punchr_proto_rawDescGZIP(), []int{5}
}

type HolePunchAttempt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unix timestamp in nanoseconds of when the /libp2p/dcutr stream was opened
	OpenedAt *uint64 `protobuf:"varint,1,req,name=opened_at,json=openedAt" json:"opened_at,omitempty"`
	// Unix timestamp in nanoseconds of when this hole punching attempt was started
	// Can be null if hole punch wasn't started, hence `optional`
	StartedAt *uint64 `protobuf:"varint,2,opt,name=started_at,json=startedAt" json:"started_at,omitempty"`
	// Unix timestamp in nanoseconds of when this hole punching attempt terminated
	EndedAt *uint64 `protobuf:"varint,3,req,name=ended_at,json=endedAt" json:"ended_at,omitempty"`
	// Start round trip time in seconds that falls out of the `holepunch.StartHolePunchEvt` event
	StartRtt *float32 `protobuf:"fixed32,4,opt,name=start_rtt,json=startRtt" json:"start_rtt,omitempty"`
	// The elapsed time in seconds from start to finish of the hole punch
	ElapsedTime *float32 `protobuf:"fixed32,5,req,name=elapsed_time,json=elapsedTime" json:"elapsed_time,omitempty"`
	// The outcome of the hole punch
	Outcome *HolePunchAttemptOutcome `protobuf:"varint,6,req,name=outcome,enum=HolePunchAttemptOutcome" json:"outcome,omitempty"`
	// The error that occurred if the hole punch failed
	Error *string `protobuf:"bytes,7,opt,name=error" json:"error,omitempty"`
	// The error that occurred if the connection reversal failed. This is only set of
	// the multi addresses for the remote peer contained a publicly reachable non-relay multi address
	DirectDialError *string `protobuf:"bytes,8,opt,name=direct_dial_error,json=directDialError" json:"direct_dial_error,omitempty"`
	// The multi addresses used to hole punch
	MultiAddresses [][]byte `protobuf:"bytes,9,rep,name=multi_addresses,json=multiAddresses" json:"multi_addresses,omitempty"`
}

func (x *HolePunchAttempt) Reset() {
	*x = HolePunchAttempt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punchr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HolePunchAttempt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HolePunchAttempt) ProtoMessage() {}

func (x *HolePunchAttempt) ProtoReflect() protoreflect.Message {
	mi := &file_punchr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HolePunchAttempt.ProtoReflect.Descriptor instead.
func (*HolePunchAttempt) Descriptor() ([]byte, []int) {
	return file_punchr_proto_rawDescGZIP(), []int{6}
}

func (x *HolePunchAttempt) GetOpenedAt() uint64 {
	if x != nil && x.OpenedAt != nil {
		return *x.OpenedAt
	}
	return 0
}

func (x *HolePunchAttempt) GetStartedAt() uint64 {
	if x != nil && x.StartedAt != nil {
		return *x.StartedAt
	}
	return 0
}

func (x *HolePunchAttempt) GetEndedAt() uint64 {
	if x != nil && x.EndedAt != nil {
		return *x.EndedAt
	}
	return 0
}

func (x *HolePunchAttempt) GetStartRtt() float32 {
	if x != nil && x.StartRtt != nil {
		return *x.StartRtt
	}
	return 0
}

func (x *HolePunchAttempt) GetElapsedTime() float32 {
	if x != nil && x.ElapsedTime != nil {
		return *x.ElapsedTime
	}
	return 0
}

func (x *HolePunchAttempt) GetOutcome() HolePunchAttemptOutcome {
	if x != nil && x.Outcome != nil {
		return *x.Outcome
	}
	return HolePunchAttemptOutcome_HOLE_PUNCH_ATTEMPT_OUTCOME_UNKNOWN
}

func (x *HolePunchAttempt) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

func (x *HolePunchAttempt) GetDirectDialError() string {
	if x != nil && x.DirectDialError != nil {
		return *x.DirectDialError
	}
	return ""
}

func (x *HolePunchAttempt) GetMultiAddresses() [][]byte {
	if x != nil {
		return x.MultiAddresses
	}
	return nil
}

type LatencyMeasurement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The remote peer ID
	RemoteId []byte `protobuf:"bytes,1,req,name=remote_id,json=remoteId" json:"remote_id,omitempty"`
	// The remote's agent_version
	AgentVersion *string `protobuf:"bytes,2,req,name=agent_version,json=agentVersion" json:"agent_version,omitempty"`
	// The remote's protocols
	Protocols []string `protobuf:"bytes,3,rep,name=protocols" json:"protocols,omitempty"`
	// The used multi address to run the ping stream over
	MultiAddress []byte `protobuf:"bytes,4,req,name=multi_address,json=multiAddress" json:"multi_address,omitempty"`
	// rtt measurements to the remote peer
	Rtts []float32 `protobuf:"fixed32,5,rep,name=rtts" json:"rtts,omitempty"`
	// rtt measurement errors to the remote peer
	RttErrs []string `protobuf:"bytes,6,rep,name=rtt_errs,json=rttErrs" json:"rtt_errs,omitempty"`
	// the type of latency measurement
	Mtype *LatencyMeasurementType `protobuf:"varint,7,req,name=mtype,enum=LatencyMeasurementType" json:"mtype,omitempty"`
}

func (x *LatencyMeasurement) Reset() {
	*x = LatencyMeasurement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punchr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatencyMeasurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatencyMeasurement) ProtoMessage() {}

func (x *LatencyMeasurement) ProtoReflect() protoreflect.Message {
	mi := &file_punchr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatencyMeasurement.ProtoReflect.Descriptor instead.
func (*LatencyMeasurement) Descriptor() ([]byte, []int) {
	return file_punchr_proto_rawDescGZIP(), []int{7}
}

func (x *LatencyMeasurement) GetRemoteId() []byte {
	if x != nil {
		return x.RemoteId
	}
	return nil
}

func (x *LatencyMeasurement) GetAgentVersion() string {
	if x != nil && x.AgentVersion != nil {
		return *x.AgentVersion
	}
	return ""
}

func (x *LatencyMeasurement) GetProtocols() []string {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *LatencyMeasurement) GetMultiAddress() []byte {
	if x != nil {
		return x.MultiAddress
	}
	return nil
}

func (x *LatencyMeasurement) GetRtts() []float32 {
	if x != nil {
		return x.Rtts
	}
	return nil
}

func (x *LatencyMeasurement) GetRttErrs() []string {
	if x != nil {
		return x.RttErrs
	}
	return nil
}

func (x *LatencyMeasurement) GetMtype() LatencyMeasurementType {
	if x != nil && x.Mtype != nil {
		return *x.Mtype
	}
	return LatencyMeasurementType_TO_RELAY
}

type NetworkInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The HTML login page of the router if it has changed
	RouterLoginHtml *string `protobuf:"bytes,1,opt,name=router_login_html,json=routerLoginHtml" json:"router_login_html,omitempty"`
	// The error that occurred when looking up the router login page
	RouterLoginHtmlError *string `protobuf:"bytes,2,opt,name=router_login_html_error,json=routerLoginHtmlError" json:"router_login_html_error,omitempty"`
	// Indicates whether the current network supports IPv6
	SupportsIpv6 *bool `protobuf:"varint,3,opt,name=supports_ipv6,json=supportsIpv6" json:"supports_ipv6,omitempty"`
	// The error that occurred when looking up the support for IPv6
	SupportsIpv6Error *string `protobuf:"bytes,4,opt,name=supports_ipv6_error,json=supportsIpv6Error" json:"supports_ipv6_error,omitempty"`
}

func (x *NetworkInformation) Reset() {
	*x = NetworkInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punchr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInformation) ProtoMessage() {}

func (x *NetworkInformation) ProtoReflect() protoreflect.Message {
	mi := &file_punchr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInformation.ProtoReflect.Descriptor instead.
func (*NetworkInformation) Descriptor() ([]byte, []int) {
	return file_punchr_proto_rawDescGZIP(), []int{8}
}

func (x *NetworkInformation) GetRouterLoginHtml() string {
	if x != nil && x.RouterLoginHtml != nil {
		return *x.RouterLoginHtml
	}
	return ""
}

func (x *NetworkInformation) GetRouterLoginHtmlError() string {
	if x != nil && x.RouterLoginHtmlError != nil {
		return *x.RouterLoginHtmlError
	}
	return ""
}

func (x *NetworkInformation) GetSupportsIpv6() bool {
	if x != nil && x.SupportsIpv6 != nil {
		return *x.SupportsIpv6
	}
	return false
}

func (x *NetworkInformation) GetSupportsIpv6Error() string {
	if x != nil && x.SupportsIpv6Error != nil {
		return *x.SupportsIpv6Error
	}
	return ""
}

var File_punchr_proto protoreflect.FileDescriptor

var file_punchr_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x75, 0x6e, 0x63, 0x68, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a,
	0x01, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x02, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x30, 0x0a, 0x10, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x0a, 0x64, 0x62, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x03, 0x52, 0x08, 0x64, 0x62, 0x50, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0x68, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x61, 0x6c, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x22, 0x79, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x73, 0x22, 0xd7, 0x05, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x65,
	0x50, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x04, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x02, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x64,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x41, 0x0a, 0x13, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x70, 0x75, 0x6e,
	0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x48, 0x6f, 0x6c, 0x65, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x52, 0x11, 0x68, 0x6f, 0x6c, 0x65, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x08, 0x20,
	0x02, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x48, 0x6f, 0x6c,
	0x65, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0b, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x14, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x0d, 0x20, 0x02, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x46,
	0x0a, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x18, 0x0a, 0x16,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x65, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x10, 0x48, 0x6f, 0x6c, 0x65, 0x50,
	0x75, 0x6e, 0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x04, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x74, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x74, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x02, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x48, 0x6f, 0x6c, 0x65, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44,
	0x69, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x22, 0xf7, 0x01, 0x0a, 0x12, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x74, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x04, 0x72, 0x74, 0x74,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x74, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x74, 0x74, 0x45, 0x72, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x05,
	0x6d, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x4c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x12,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x35,
	0x0a, 0x17, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x68,
	0x74, 0x6d, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x48, 0x74, 0x6d, 0x6c,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x49, 0x70, 0x76, 0x36, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x49, 0x70, 0x76, 0x36, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0x87, 0x02, 0x0a, 0x10, 0x48,
	0x6f, 0x6c, 0x65, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x1a, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x4e, 0x43, 0x48, 0x5f, 0x4f, 0x55,
	0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x24, 0x0a, 0x20, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x4e, 0x43, 0x48, 0x5f, 0x4f, 0x55,
	0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x55,
	0x4e, 0x43, 0x48, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x48, 0x4f, 0x4c, 0x45, 0x5f,
	0x50, 0x55, 0x4e, 0x43, 0x48, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x4e, 0x43,
	0x48, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x55,
	0x4e, 0x43, 0x48, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x4e,
	0x43, 0x48, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x06, 0x2a, 0xbd, 0x02, 0x0a, 0x17, 0x48, 0x6f, 0x6c, 0x65, 0x50, 0x75, 0x6e,
	0x63, 0x68, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x22, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x4e, 0x43, 0x48, 0x5f, 0x41,
	0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26, 0x48, 0x4f, 0x4c, 0x45,
	0x5f, 0x50, 0x55, 0x4e, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x4f,
	0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x49,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x4e,
	0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f,
	0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x4e, 0x43,
	0x48, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d,
	0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x26, 0x0a,
	0x22, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x4e, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x45,
	0x4d, 0x50, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x55,
	0x4e, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x43,
	0x4f, 0x4d, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22,
	0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x55, 0x4e, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d,
	0x50, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x06, 0x2a, 0x63, 0x0a, 0x16, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c,
	0x0a, 0x08, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x54, 0x4f, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47,
	0x48, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x4f, 0x5f,
	0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x48, 0x4f, 0x4c,
	0x45, 0x5f, 0x50, 0x55, 0x4e, 0x43, 0x48, 0x10, 0x02, 0x32, 0xbd, 0x01, 0x0a, 0x0d, 0x50, 0x75,
	0x6e, 0x63, 0x68, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x10, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x13, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x48,
	0x6f, 0x6c, 0x65, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x48, 0x6f, 0x6c, 0x65, 0x50, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x6f, 0x6c, 0x65, 0x50, 0x75, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x65, 0x6e, 0x6e, 0x69, 0x73, 0x2d, 0x74,
	0x72, 0x61, 0x2f, 0x70, 0x75, 0x6e, 0x63, 0x68, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62,
}

var (
	file_punchr_proto_rawDescOnce sync.Once
	file_punchr_proto_rawDescData = file_punchr_proto_rawDesc
)

func file_punchr_proto_rawDescGZIP() []byte {
	file_punchr_proto_rawDescOnce.Do(func() {
		file_punchr_proto_rawDescData = protoimpl.X.CompressGZIP(file_punchr_proto_rawDescData)
	})
	return file_punchr_proto_rawDescData
}

var file_punchr_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_punchr_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_punchr_proto_goTypes = []interface{}{
	(HolePunchOutcome)(0),          // 0: HolePunchOutcome
	(HolePunchAttemptOutcome)(0),   // 1: HolePunchAttemptOutcome
	(LatencyMeasurementType)(0),    // 2: LatencyMeasurementType
	(*RegisterRequest)(nil),        // 3: RegisterRequest
	(*RegisterResponse)(nil),       // 4: RegisterResponse
	(*GetAddrInfoRequest)(nil),     // 5: GetAddrInfoRequest
	(*GetAddrInfoResponse)(nil),    // 6: GetAddrInfoResponse
	(*TrackHolePunchRequest)(nil),  // 7: TrackHolePunchRequest
	(*TrackHolePunchResponse)(nil), // 8: TrackHolePunchResponse
	(*HolePunchAttempt)(nil),       // 9: HolePunchAttempt
	(*LatencyMeasurement)(nil),     // 10: LatencyMeasurement
	(*NetworkInformation)(nil),     // 11: NetworkInformation
}
var file_punchr_proto_depIdxs = []int32{
	9,  // 0: TrackHolePunchRequest.hole_punch_attempts:type_name -> HolePunchAttempt
	0,  // 1: TrackHolePunchRequest.outcome:type_name -> HolePunchOutcome
	10, // 2: TrackHolePunchRequest.latency_measurements:type_name -> LatencyMeasurement
	11, // 3: TrackHolePunchRequest.network_information:type_name -> NetworkInformation
	1,  // 4: HolePunchAttempt.outcome:type_name -> HolePunchAttemptOutcome
	2,  // 5: LatencyMeasurement.mtype:type_name -> LatencyMeasurementType
	3,  // 6: PunchrService.Register:input_type -> RegisterRequest
	5,  // 7: PunchrService.GetAddrInfo:input_type -> GetAddrInfoRequest
	7,  // 8: PunchrService.TrackHolePunch:input_type -> TrackHolePunchRequest
	4,  // 9: PunchrService.Register:output_type -> RegisterResponse
	6,  // 10: PunchrService.GetAddrInfo:output_type -> GetAddrInfoResponse
	8,  // 11: PunchrService.TrackHolePunch:output_type -> TrackHolePunchResponse
	9,  // [9:12] is the sub-list for method output_type
	6,  // [6:9] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_punchr_proto_init() }
func file_punchr_proto_init() {
	if File_punchr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_punchr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punchr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punchr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddrInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punchr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddrInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punchr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackHolePunchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punchr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackHolePunchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punchr_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HolePunchAttempt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punchr_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatencyMeasurement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punchr_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_punchr_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_punchr_proto_goTypes,
		DependencyIndexes: file_punchr_proto_depIdxs,
		EnumInfos:         file_punchr_proto_enumTypes,
		MessageInfos:      file_punchr_proto_msgTypes,
	}.Build()
	File_punchr_proto = out.File
	file_punchr_proto_rawDesc = nil
	file_punchr_proto_goTypes = nil
	file_punchr_proto_depIdxs = nil
}
