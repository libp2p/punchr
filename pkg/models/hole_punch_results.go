// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// HolePunchResult is an object representing the database table.
type HolePunchResult struct {
	ID                        int              `boil:"id" json:"id" toml:"id" yaml:"id"`
	LocalID                   int64            `boil:"local_id" json:"local_id" toml:"local_id" yaml:"local_id"`
	RemoteID                  int64            `boil:"remote_id" json:"remote_id" toml:"remote_id" yaml:"remote_id"`
	ConnectStartedAt          time.Time        `boil:"connect_started_at" json:"connect_started_at" toml:"connect_started_at" yaml:"connect_started_at"`
	ConnectEndedAt            time.Time        `boil:"connect_ended_at" json:"connect_ended_at" toml:"connect_ended_at" yaml:"connect_ended_at"`
	HasDirectConns            bool             `boil:"has_direct_conns" json:"has_direct_conns" toml:"has_direct_conns" yaml:"has_direct_conns"`
	Error                     null.String      `boil:"error" json:"error,omitempty" toml:"error" yaml:"error,omitempty"`
	Outcome                   string           `boil:"outcome" json:"outcome" toml:"outcome" yaml:"outcome"`
	EndedAt                   time.Time        `boil:"ended_at" json:"ended_at" toml:"ended_at" yaml:"ended_at"`
	ProtocolFilters           types.Int64Array `boil:"protocol_filters" json:"protocol_filters" toml:"protocol_filters" yaml:"protocol_filters"`
	UpdatedAt                 time.Time        `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt                 time.Time        `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	ListenMultiAddressesSetID int              `boil:"listen_multi_addresses_set_id" json:"listen_multi_addresses_set_id" toml:"listen_multi_addresses_set_id" yaml:"listen_multi_addresses_set_id"`

	R *holePunchResultR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L holePunchResultL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var HolePunchResultColumns = struct {
	ID                        string
	LocalID                   string
	RemoteID                  string
	ConnectStartedAt          string
	ConnectEndedAt            string
	HasDirectConns            string
	Error                     string
	Outcome                   string
	EndedAt                   string
	ProtocolFilters           string
	UpdatedAt                 string
	CreatedAt                 string
	ListenMultiAddressesSetID string
}{
	ID:                        "id",
	LocalID:                   "local_id",
	RemoteID:                  "remote_id",
	ConnectStartedAt:          "connect_started_at",
	ConnectEndedAt:            "connect_ended_at",
	HasDirectConns:            "has_direct_conns",
	Error:                     "error",
	Outcome:                   "outcome",
	EndedAt:                   "ended_at",
	ProtocolFilters:           "protocol_filters",
	UpdatedAt:                 "updated_at",
	CreatedAt:                 "created_at",
	ListenMultiAddressesSetID: "listen_multi_addresses_set_id",
}

var HolePunchResultTableColumns = struct {
	ID                        string
	LocalID                   string
	RemoteID                  string
	ConnectStartedAt          string
	ConnectEndedAt            string
	HasDirectConns            string
	Error                     string
	Outcome                   string
	EndedAt                   string
	ProtocolFilters           string
	UpdatedAt                 string
	CreatedAt                 string
	ListenMultiAddressesSetID string
}{
	ID:                        "hole_punch_results.id",
	LocalID:                   "hole_punch_results.local_id",
	RemoteID:                  "hole_punch_results.remote_id",
	ConnectStartedAt:          "hole_punch_results.connect_started_at",
	ConnectEndedAt:            "hole_punch_results.connect_ended_at",
	HasDirectConns:            "hole_punch_results.has_direct_conns",
	Error:                     "hole_punch_results.error",
	Outcome:                   "hole_punch_results.outcome",
	EndedAt:                   "hole_punch_results.ended_at",
	ProtocolFilters:           "hole_punch_results.protocol_filters",
	UpdatedAt:                 "hole_punch_results.updated_at",
	CreatedAt:                 "hole_punch_results.created_at",
	ListenMultiAddressesSetID: "hole_punch_results.listen_multi_addresses_set_id",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertypes_Int64Array struct{ field string }

func (w whereHelpertypes_Int64Array) EQ(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Int64Array) NEQ(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Int64Array) LT(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Int64Array) LTE(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Int64Array) GT(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Int64Array) GTE(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var HolePunchResultWhere = struct {
	ID                        whereHelperint
	LocalID                   whereHelperint64
	RemoteID                  whereHelperint64
	ConnectStartedAt          whereHelpertime_Time
	ConnectEndedAt            whereHelpertime_Time
	HasDirectConns            whereHelperbool
	Error                     whereHelpernull_String
	Outcome                   whereHelperstring
	EndedAt                   whereHelpertime_Time
	ProtocolFilters           whereHelpertypes_Int64Array
	UpdatedAt                 whereHelpertime_Time
	CreatedAt                 whereHelpertime_Time
	ListenMultiAddressesSetID whereHelperint
}{
	ID:                        whereHelperint{field: "\"hole_punch_results\".\"id\""},
	LocalID:                   whereHelperint64{field: "\"hole_punch_results\".\"local_id\""},
	RemoteID:                  whereHelperint64{field: "\"hole_punch_results\".\"remote_id\""},
	ConnectStartedAt:          whereHelpertime_Time{field: "\"hole_punch_results\".\"connect_started_at\""},
	ConnectEndedAt:            whereHelpertime_Time{field: "\"hole_punch_results\".\"connect_ended_at\""},
	HasDirectConns:            whereHelperbool{field: "\"hole_punch_results\".\"has_direct_conns\""},
	Error:                     whereHelpernull_String{field: "\"hole_punch_results\".\"error\""},
	Outcome:                   whereHelperstring{field: "\"hole_punch_results\".\"outcome\""},
	EndedAt:                   whereHelpertime_Time{field: "\"hole_punch_results\".\"ended_at\""},
	ProtocolFilters:           whereHelpertypes_Int64Array{field: "\"hole_punch_results\".\"protocol_filters\""},
	UpdatedAt:                 whereHelpertime_Time{field: "\"hole_punch_results\".\"updated_at\""},
	CreatedAt:                 whereHelpertime_Time{field: "\"hole_punch_results\".\"created_at\""},
	ListenMultiAddressesSetID: whereHelperint{field: "\"hole_punch_results\".\"listen_multi_addresses_set_id\""},
}

// HolePunchResultRels is where relationship names are stored.
var HolePunchResultRels = struct {
	ListenMultiAddressesSet         string
	Local                           string
	Remote                          string
	HolePunchAttempts               string
	HolePunchResultsXMultiAddresses string
	LatencyMeasurements             string
}{
	ListenMultiAddressesSet:         "ListenMultiAddressesSet",
	Local:                           "Local",
	Remote:                          "Remote",
	HolePunchAttempts:               "HolePunchAttempts",
	HolePunchResultsXMultiAddresses: "HolePunchResultsXMultiAddresses",
	LatencyMeasurements:             "LatencyMeasurements",
}

// holePunchResultR is where relationships are stored.
type holePunchResultR struct {
	ListenMultiAddressesSet         *MultiAddressesSet                 `boil:"ListenMultiAddressesSet" json:"ListenMultiAddressesSet" toml:"ListenMultiAddressesSet" yaml:"ListenMultiAddressesSet"`
	Local                           *Peer                              `boil:"Local" json:"Local" toml:"Local" yaml:"Local"`
	Remote                          *Peer                              `boil:"Remote" json:"Remote" toml:"Remote" yaml:"Remote"`
	HolePunchAttempts               HolePunchAttemptSlice              `boil:"HolePunchAttempts" json:"HolePunchAttempts" toml:"HolePunchAttempts" yaml:"HolePunchAttempts"`
	HolePunchResultsXMultiAddresses HolePunchResultsXMultiAddressSlice `boil:"HolePunchResultsXMultiAddresses" json:"HolePunchResultsXMultiAddresses" toml:"HolePunchResultsXMultiAddresses" yaml:"HolePunchResultsXMultiAddresses"`
	LatencyMeasurements             LatencyMeasurementSlice            `boil:"LatencyMeasurements" json:"LatencyMeasurements" toml:"LatencyMeasurements" yaml:"LatencyMeasurements"`
}

// NewStruct creates a new relationship struct
func (*holePunchResultR) NewStruct() *holePunchResultR {
	return &holePunchResultR{}
}

func (r *holePunchResultR) GetListenMultiAddressesSet() *MultiAddressesSet {
	if r == nil {
		return nil
	}
	return r.ListenMultiAddressesSet
}

func (r *holePunchResultR) GetLocal() *Peer {
	if r == nil {
		return nil
	}
	return r.Local
}

func (r *holePunchResultR) GetRemote() *Peer {
	if r == nil {
		return nil
	}
	return r.Remote
}

func (r *holePunchResultR) GetHolePunchAttempts() HolePunchAttemptSlice {
	if r == nil {
		return nil
	}
	return r.HolePunchAttempts
}

func (r *holePunchResultR) GetHolePunchResultsXMultiAddresses() HolePunchResultsXMultiAddressSlice {
	if r == nil {
		return nil
	}
	return r.HolePunchResultsXMultiAddresses
}

func (r *holePunchResultR) GetLatencyMeasurements() LatencyMeasurementSlice {
	if r == nil {
		return nil
	}
	return r.LatencyMeasurements
}

// holePunchResultL is where Load methods for each relationship are stored.
type holePunchResultL struct{}

var (
	holePunchResultAllColumns            = []string{"id", "local_id", "remote_id", "connect_started_at", "connect_ended_at", "has_direct_conns", "error", "outcome", "ended_at", "protocol_filters", "updated_at", "created_at", "listen_multi_addresses_set_id"}
	holePunchResultColumnsWithoutDefault = []string{"local_id", "remote_id", "connect_started_at", "connect_ended_at", "has_direct_conns", "outcome", "ended_at", "protocol_filters", "updated_at", "created_at"}
	holePunchResultColumnsWithDefault    = []string{"id", "error", "listen_multi_addresses_set_id"}
	holePunchResultPrimaryKeyColumns     = []string{"id"}
	holePunchResultGeneratedColumns      = []string{"id"}
)

type (
	// HolePunchResultSlice is an alias for a slice of pointers to HolePunchResult.
	// This should almost always be used instead of []HolePunchResult.
	HolePunchResultSlice []*HolePunchResult
	// HolePunchResultHook is the signature for custom HolePunchResult hook methods
	HolePunchResultHook func(context.Context, boil.ContextExecutor, *HolePunchResult) error

	holePunchResultQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	holePunchResultType                 = reflect.TypeOf(&HolePunchResult{})
	holePunchResultMapping              = queries.MakeStructMapping(holePunchResultType)
	holePunchResultPrimaryKeyMapping, _ = queries.BindMapping(holePunchResultType, holePunchResultMapping, holePunchResultPrimaryKeyColumns)
	holePunchResultInsertCacheMut       sync.RWMutex
	holePunchResultInsertCache          = make(map[string]insertCache)
	holePunchResultUpdateCacheMut       sync.RWMutex
	holePunchResultUpdateCache          = make(map[string]updateCache)
	holePunchResultUpsertCacheMut       sync.RWMutex
	holePunchResultUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var holePunchResultAfterSelectHooks []HolePunchResultHook

var holePunchResultBeforeInsertHooks []HolePunchResultHook
var holePunchResultAfterInsertHooks []HolePunchResultHook

var holePunchResultBeforeUpdateHooks []HolePunchResultHook
var holePunchResultAfterUpdateHooks []HolePunchResultHook

var holePunchResultBeforeDeleteHooks []HolePunchResultHook
var holePunchResultAfterDeleteHooks []HolePunchResultHook

var holePunchResultBeforeUpsertHooks []HolePunchResultHook
var holePunchResultAfterUpsertHooks []HolePunchResultHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *HolePunchResult) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *HolePunchResult) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *HolePunchResult) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *HolePunchResult) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *HolePunchResult) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *HolePunchResult) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *HolePunchResult) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *HolePunchResult) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *HolePunchResult) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range holePunchResultAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddHolePunchResultHook registers your hook function for all future operations.
func AddHolePunchResultHook(hookPoint boil.HookPoint, holePunchResultHook HolePunchResultHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		holePunchResultAfterSelectHooks = append(holePunchResultAfterSelectHooks, holePunchResultHook)
	case boil.BeforeInsertHook:
		holePunchResultBeforeInsertHooks = append(holePunchResultBeforeInsertHooks, holePunchResultHook)
	case boil.AfterInsertHook:
		holePunchResultAfterInsertHooks = append(holePunchResultAfterInsertHooks, holePunchResultHook)
	case boil.BeforeUpdateHook:
		holePunchResultBeforeUpdateHooks = append(holePunchResultBeforeUpdateHooks, holePunchResultHook)
	case boil.AfterUpdateHook:
		holePunchResultAfterUpdateHooks = append(holePunchResultAfterUpdateHooks, holePunchResultHook)
	case boil.BeforeDeleteHook:
		holePunchResultBeforeDeleteHooks = append(holePunchResultBeforeDeleteHooks, holePunchResultHook)
	case boil.AfterDeleteHook:
		holePunchResultAfterDeleteHooks = append(holePunchResultAfterDeleteHooks, holePunchResultHook)
	case boil.BeforeUpsertHook:
		holePunchResultBeforeUpsertHooks = append(holePunchResultBeforeUpsertHooks, holePunchResultHook)
	case boil.AfterUpsertHook:
		holePunchResultAfterUpsertHooks = append(holePunchResultAfterUpsertHooks, holePunchResultHook)
	}
}

// One returns a single holePunchResult record from the query.
func (q holePunchResultQuery) One(ctx context.Context, exec boil.ContextExecutor) (*HolePunchResult, error) {
	o := &HolePunchResult{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for hole_punch_results")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all HolePunchResult records from the query.
func (q holePunchResultQuery) All(ctx context.Context, exec boil.ContextExecutor) (HolePunchResultSlice, error) {
	var o []*HolePunchResult

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to HolePunchResult slice")
	}

	if len(holePunchResultAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all HolePunchResult records in the query.
func (q holePunchResultQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count hole_punch_results rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q holePunchResultQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if hole_punch_results exists")
	}

	return count > 0, nil
}

// ListenMultiAddressesSet pointed to by the foreign key.
func (o *HolePunchResult) ListenMultiAddressesSet(mods ...qm.QueryMod) multiAddressesSetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ListenMultiAddressesSetID),
	}

	queryMods = append(queryMods, mods...)

	return MultiAddressesSets(queryMods...)
}

// Local pointed to by the foreign key.
func (o *HolePunchResult) Local(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LocalID),
	}

	queryMods = append(queryMods, mods...)

	return Peers(queryMods...)
}

// Remote pointed to by the foreign key.
func (o *HolePunchResult) Remote(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RemoteID),
	}

	queryMods = append(queryMods, mods...)

	return Peers(queryMods...)
}

// HolePunchAttempts retrieves all the hole_punch_attempt's HolePunchAttempts with an executor.
func (o *HolePunchResult) HolePunchAttempts(mods ...qm.QueryMod) holePunchAttemptQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"hole_punch_attempt\".\"hole_punch_result_id\"=?", o.ID),
	)

	return HolePunchAttempts(queryMods...)
}

// HolePunchResultsXMultiAddresses retrieves all the hole_punch_results_x_multi_address's HolePunchResultsXMultiAddresses with an executor.
func (o *HolePunchResult) HolePunchResultsXMultiAddresses(mods ...qm.QueryMod) holePunchResultsXMultiAddressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"hole_punch_results_x_multi_addresses\".\"hole_punch_result_id\"=?", o.ID),
	)

	return HolePunchResultsXMultiAddresses(queryMods...)
}

// LatencyMeasurements retrieves all the latency_measurement's LatencyMeasurements with an executor.
func (o *HolePunchResult) LatencyMeasurements(mods ...qm.QueryMod) latencyMeasurementQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"latency_measurements\".\"hole_punch_result_id\"=?", o.ID),
	)

	return LatencyMeasurements(queryMods...)
}

// LoadListenMultiAddressesSet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (holePunchResultL) LoadListenMultiAddressesSet(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHolePunchResult interface{}, mods queries.Applicator) error {
	var slice []*HolePunchResult
	var object *HolePunchResult

	if singular {
		var ok bool
		object, ok = maybeHolePunchResult.(*HolePunchResult)
		if !ok {
			object = new(HolePunchResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHolePunchResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHolePunchResult))
			}
		}
	} else {
		s, ok := maybeHolePunchResult.(*[]*HolePunchResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHolePunchResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHolePunchResult))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &holePunchResultR{}
		}
		args = append(args, object.ListenMultiAddressesSetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &holePunchResultR{}
			}

			for _, a := range args {
				if a == obj.ListenMultiAddressesSetID {
					continue Outer
				}
			}

			args = append(args, obj.ListenMultiAddressesSetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`multi_addresses_sets`),
		qm.WhereIn(`multi_addresses_sets.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MultiAddressesSet")
	}

	var resultSlice []*MultiAddressesSet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MultiAddressesSet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for multi_addresses_sets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for multi_addresses_sets")
	}

	if len(holePunchResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ListenMultiAddressesSet = foreign
		if foreign.R == nil {
			foreign.R = &multiAddressesSetR{}
		}
		foreign.R.ListenMultiAddressesSetHolePunchResults = append(foreign.R.ListenMultiAddressesSetHolePunchResults, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ListenMultiAddressesSetID == foreign.ID {
				local.R.ListenMultiAddressesSet = foreign
				if foreign.R == nil {
					foreign.R = &multiAddressesSetR{}
				}
				foreign.R.ListenMultiAddressesSetHolePunchResults = append(foreign.R.ListenMultiAddressesSetHolePunchResults, local)
				break
			}
		}
	}

	return nil
}

// LoadLocal allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (holePunchResultL) LoadLocal(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHolePunchResult interface{}, mods queries.Applicator) error {
	var slice []*HolePunchResult
	var object *HolePunchResult

	if singular {
		var ok bool
		object, ok = maybeHolePunchResult.(*HolePunchResult)
		if !ok {
			object = new(HolePunchResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHolePunchResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHolePunchResult))
			}
		}
	} else {
		s, ok := maybeHolePunchResult.(*[]*HolePunchResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHolePunchResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHolePunchResult))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &holePunchResultR{}
		}
		args = append(args, object.LocalID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &holePunchResultR{}
			}

			for _, a := range args {
				if a == obj.LocalID {
					continue Outer
				}
			}

			args = append(args, obj.LocalID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(holePunchResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Local = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.LocalHolePunchResults = append(foreign.R.LocalHolePunchResults, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LocalID == foreign.ID {
				local.R.Local = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.LocalHolePunchResults = append(foreign.R.LocalHolePunchResults, local)
				break
			}
		}
	}

	return nil
}

// LoadRemote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (holePunchResultL) LoadRemote(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHolePunchResult interface{}, mods queries.Applicator) error {
	var slice []*HolePunchResult
	var object *HolePunchResult

	if singular {
		var ok bool
		object, ok = maybeHolePunchResult.(*HolePunchResult)
		if !ok {
			object = new(HolePunchResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHolePunchResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHolePunchResult))
			}
		}
	} else {
		s, ok := maybeHolePunchResult.(*[]*HolePunchResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHolePunchResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHolePunchResult))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &holePunchResultR{}
		}
		args = append(args, object.RemoteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &holePunchResultR{}
			}

			for _, a := range args {
				if a == obj.RemoteID {
					continue Outer
				}
			}

			args = append(args, obj.RemoteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(holePunchResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Remote = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.RemoteHolePunchResults = append(foreign.R.RemoteHolePunchResults, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RemoteID == foreign.ID {
				local.R.Remote = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.RemoteHolePunchResults = append(foreign.R.RemoteHolePunchResults, local)
				break
			}
		}
	}

	return nil
}

// LoadHolePunchAttempts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (holePunchResultL) LoadHolePunchAttempts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHolePunchResult interface{}, mods queries.Applicator) error {
	var slice []*HolePunchResult
	var object *HolePunchResult

	if singular {
		var ok bool
		object, ok = maybeHolePunchResult.(*HolePunchResult)
		if !ok {
			object = new(HolePunchResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHolePunchResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHolePunchResult))
			}
		}
	} else {
		s, ok := maybeHolePunchResult.(*[]*HolePunchResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHolePunchResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHolePunchResult))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &holePunchResultR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &holePunchResultR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hole_punch_attempt`),
		qm.WhereIn(`hole_punch_attempt.hole_punch_result_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load hole_punch_attempt")
	}

	var resultSlice []*HolePunchAttempt
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice hole_punch_attempt")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on hole_punch_attempt")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hole_punch_attempt")
	}

	if len(holePunchAttemptAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.HolePunchAttempts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &holePunchAttemptR{}
			}
			foreign.R.HolePunchResult = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.HolePunchResultID {
				local.R.HolePunchAttempts = append(local.R.HolePunchAttempts, foreign)
				if foreign.R == nil {
					foreign.R = &holePunchAttemptR{}
				}
				foreign.R.HolePunchResult = local
				break
			}
		}
	}

	return nil
}

// LoadHolePunchResultsXMultiAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (holePunchResultL) LoadHolePunchResultsXMultiAddresses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHolePunchResult interface{}, mods queries.Applicator) error {
	var slice []*HolePunchResult
	var object *HolePunchResult

	if singular {
		var ok bool
		object, ok = maybeHolePunchResult.(*HolePunchResult)
		if !ok {
			object = new(HolePunchResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHolePunchResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHolePunchResult))
			}
		}
	} else {
		s, ok := maybeHolePunchResult.(*[]*HolePunchResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHolePunchResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHolePunchResult))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &holePunchResultR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &holePunchResultR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hole_punch_results_x_multi_addresses`),
		qm.WhereIn(`hole_punch_results_x_multi_addresses.hole_punch_result_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load hole_punch_results_x_multi_addresses")
	}

	var resultSlice []*HolePunchResultsXMultiAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice hole_punch_results_x_multi_addresses")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on hole_punch_results_x_multi_addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hole_punch_results_x_multi_addresses")
	}

	if len(holePunchResultsXMultiAddressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.HolePunchResultsXMultiAddresses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &holePunchResultsXMultiAddressR{}
			}
			foreign.R.HolePunchResult = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.HolePunchResultID {
				local.R.HolePunchResultsXMultiAddresses = append(local.R.HolePunchResultsXMultiAddresses, foreign)
				if foreign.R == nil {
					foreign.R = &holePunchResultsXMultiAddressR{}
				}
				foreign.R.HolePunchResult = local
				break
			}
		}
	}

	return nil
}

// LoadLatencyMeasurements allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (holePunchResultL) LoadLatencyMeasurements(ctx context.Context, e boil.ContextExecutor, singular bool, maybeHolePunchResult interface{}, mods queries.Applicator) error {
	var slice []*HolePunchResult
	var object *HolePunchResult

	if singular {
		var ok bool
		object, ok = maybeHolePunchResult.(*HolePunchResult)
		if !ok {
			object = new(HolePunchResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeHolePunchResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeHolePunchResult))
			}
		}
	} else {
		s, ok := maybeHolePunchResult.(*[]*HolePunchResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeHolePunchResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeHolePunchResult))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &holePunchResultR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &holePunchResultR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`latency_measurements`),
		qm.WhereIn(`latency_measurements.hole_punch_result_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load latency_measurements")
	}

	var resultSlice []*LatencyMeasurement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice latency_measurements")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on latency_measurements")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for latency_measurements")
	}

	if len(latencyMeasurementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LatencyMeasurements = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &latencyMeasurementR{}
			}
			foreign.R.HolePunchResult = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.HolePunchResultID {
				local.R.LatencyMeasurements = append(local.R.LatencyMeasurements, foreign)
				if foreign.R == nil {
					foreign.R = &latencyMeasurementR{}
				}
				foreign.R.HolePunchResult = local
				break
			}
		}
	}

	return nil
}

// SetListenMultiAddressesSet of the holePunchResult to the related item.
// Sets o.R.ListenMultiAddressesSet to related.
// Adds o to related.R.ListenMultiAddressesSetHolePunchResults.
func (o *HolePunchResult) SetListenMultiAddressesSet(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MultiAddressesSet) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"hole_punch_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"listen_multi_addresses_set_id"}),
		strmangle.WhereClause("\"", "\"", 2, holePunchResultPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ListenMultiAddressesSetID = related.ID
	if o.R == nil {
		o.R = &holePunchResultR{
			ListenMultiAddressesSet: related,
		}
	} else {
		o.R.ListenMultiAddressesSet = related
	}

	if related.R == nil {
		related.R = &multiAddressesSetR{
			ListenMultiAddressesSetHolePunchResults: HolePunchResultSlice{o},
		}
	} else {
		related.R.ListenMultiAddressesSetHolePunchResults = append(related.R.ListenMultiAddressesSetHolePunchResults, o)
	}

	return nil
}

// SetLocal of the holePunchResult to the related item.
// Sets o.R.Local to related.
// Adds o to related.R.LocalHolePunchResults.
func (o *HolePunchResult) SetLocal(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"hole_punch_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"local_id"}),
		strmangle.WhereClause("\"", "\"", 2, holePunchResultPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LocalID = related.ID
	if o.R == nil {
		o.R = &holePunchResultR{
			Local: related,
		}
	} else {
		o.R.Local = related
	}

	if related.R == nil {
		related.R = &peerR{
			LocalHolePunchResults: HolePunchResultSlice{o},
		}
	} else {
		related.R.LocalHolePunchResults = append(related.R.LocalHolePunchResults, o)
	}

	return nil
}

// SetRemote of the holePunchResult to the related item.
// Sets o.R.Remote to related.
// Adds o to related.R.RemoteHolePunchResults.
func (o *HolePunchResult) SetRemote(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"hole_punch_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"remote_id"}),
		strmangle.WhereClause("\"", "\"", 2, holePunchResultPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RemoteID = related.ID
	if o.R == nil {
		o.R = &holePunchResultR{
			Remote: related,
		}
	} else {
		o.R.Remote = related
	}

	if related.R == nil {
		related.R = &peerR{
			RemoteHolePunchResults: HolePunchResultSlice{o},
		}
	} else {
		related.R.RemoteHolePunchResults = append(related.R.RemoteHolePunchResults, o)
	}

	return nil
}

// AddHolePunchAttempts adds the given related objects to the existing relationships
// of the hole_punch_result, optionally inserting them as new records.
// Appends related to o.R.HolePunchAttempts.
// Sets related.R.HolePunchResult appropriately.
func (o *HolePunchResult) AddHolePunchAttempts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*HolePunchAttempt) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.HolePunchResultID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"hole_punch_attempt\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"hole_punch_result_id"}),
				strmangle.WhereClause("\"", "\"", 2, holePunchAttemptPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.HolePunchResultID = o.ID
		}
	}

	if o.R == nil {
		o.R = &holePunchResultR{
			HolePunchAttempts: related,
		}
	} else {
		o.R.HolePunchAttempts = append(o.R.HolePunchAttempts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &holePunchAttemptR{
				HolePunchResult: o,
			}
		} else {
			rel.R.HolePunchResult = o
		}
	}
	return nil
}

// AddHolePunchResultsXMultiAddresses adds the given related objects to the existing relationships
// of the hole_punch_result, optionally inserting them as new records.
// Appends related to o.R.HolePunchResultsXMultiAddresses.
// Sets related.R.HolePunchResult appropriately.
func (o *HolePunchResult) AddHolePunchResultsXMultiAddresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*HolePunchResultsXMultiAddress) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.HolePunchResultID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"hole_punch_results_x_multi_addresses\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"hole_punch_result_id"}),
				strmangle.WhereClause("\"", "\"", 2, holePunchResultsXMultiAddressPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.MultiAddressID, rel.HolePunchResultID, rel.Relationship}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.HolePunchResultID = o.ID
		}
	}

	if o.R == nil {
		o.R = &holePunchResultR{
			HolePunchResultsXMultiAddresses: related,
		}
	} else {
		o.R.HolePunchResultsXMultiAddresses = append(o.R.HolePunchResultsXMultiAddresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &holePunchResultsXMultiAddressR{
				HolePunchResult: o,
			}
		} else {
			rel.R.HolePunchResult = o
		}
	}
	return nil
}

// AddLatencyMeasurements adds the given related objects to the existing relationships
// of the hole_punch_result, optionally inserting them as new records.
// Appends related to o.R.LatencyMeasurements.
// Sets related.R.HolePunchResult appropriately.
func (o *HolePunchResult) AddLatencyMeasurements(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*LatencyMeasurement) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.HolePunchResultID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"latency_measurements\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"hole_punch_result_id"}),
				strmangle.WhereClause("\"", "\"", 2, latencyMeasurementPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.HolePunchResultID = o.ID
		}
	}

	if o.R == nil {
		o.R = &holePunchResultR{
			LatencyMeasurements: related,
		}
	} else {
		o.R.LatencyMeasurements = append(o.R.LatencyMeasurements, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &latencyMeasurementR{
				HolePunchResult: o,
			}
		} else {
			rel.R.HolePunchResult = o
		}
	}
	return nil
}

// HolePunchResults retrieves all the records using an executor.
func HolePunchResults(mods ...qm.QueryMod) holePunchResultQuery {
	mods = append(mods, qm.From("\"hole_punch_results\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"hole_punch_results\".*"})
	}

	return holePunchResultQuery{q}
}

// FindHolePunchResult retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindHolePunchResult(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*HolePunchResult, error) {
	holePunchResultObj := &HolePunchResult{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"hole_punch_results\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, holePunchResultObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from hole_punch_results")
	}

	if err = holePunchResultObj.doAfterSelectHooks(ctx, exec); err != nil {
		return holePunchResultObj, err
	}

	return holePunchResultObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *HolePunchResult) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no hole_punch_results provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(holePunchResultColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	holePunchResultInsertCacheMut.RLock()
	cache, cached := holePunchResultInsertCache[key]
	holePunchResultInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			holePunchResultAllColumns,
			holePunchResultColumnsWithDefault,
			holePunchResultColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, holePunchResultGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(holePunchResultType, holePunchResultMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(holePunchResultType, holePunchResultMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"hole_punch_results\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"hole_punch_results\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into hole_punch_results")
	}

	if !cached {
		holePunchResultInsertCacheMut.Lock()
		holePunchResultInsertCache[key] = cache
		holePunchResultInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the HolePunchResult.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *HolePunchResult) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	holePunchResultUpdateCacheMut.RLock()
	cache, cached := holePunchResultUpdateCache[key]
	holePunchResultUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			holePunchResultAllColumns,
			holePunchResultPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, holePunchResultGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update hole_punch_results, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"hole_punch_results\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, holePunchResultPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(holePunchResultType, holePunchResultMapping, append(wl, holePunchResultPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update hole_punch_results row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for hole_punch_results")
	}

	if !cached {
		holePunchResultUpdateCacheMut.Lock()
		holePunchResultUpdateCache[key] = cache
		holePunchResultUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q holePunchResultQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for hole_punch_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for hole_punch_results")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o HolePunchResultSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), holePunchResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"hole_punch_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, holePunchResultPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in holePunchResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all holePunchResult")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *HolePunchResult) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no hole_punch_results provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(holePunchResultColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	holePunchResultUpsertCacheMut.RLock()
	cache, cached := holePunchResultUpsertCache[key]
	holePunchResultUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			holePunchResultAllColumns,
			holePunchResultColumnsWithDefault,
			holePunchResultColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			holePunchResultAllColumns,
			holePunchResultPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, holePunchResultGeneratedColumns)
		update = strmangle.SetComplement(update, holePunchResultGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert hole_punch_results, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(holePunchResultPrimaryKeyColumns))
			copy(conflict, holePunchResultPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"hole_punch_results\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(holePunchResultType, holePunchResultMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(holePunchResultType, holePunchResultMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert hole_punch_results")
	}

	if !cached {
		holePunchResultUpsertCacheMut.Lock()
		holePunchResultUpsertCache[key] = cache
		holePunchResultUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single HolePunchResult record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *HolePunchResult) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no HolePunchResult provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), holePunchResultPrimaryKeyMapping)
	sql := "DELETE FROM \"hole_punch_results\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from hole_punch_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for hole_punch_results")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q holePunchResultQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no holePunchResultQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from hole_punch_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hole_punch_results")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o HolePunchResultSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(holePunchResultBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), holePunchResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"hole_punch_results\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, holePunchResultPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from holePunchResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for hole_punch_results")
	}

	if len(holePunchResultAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *HolePunchResult) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindHolePunchResult(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *HolePunchResultSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := HolePunchResultSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), holePunchResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"hole_punch_results\".* FROM \"hole_punch_results\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, holePunchResultPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in HolePunchResultSlice")
	}

	*o = slice

	return nil
}

// HolePunchResultExists checks if the HolePunchResult row exists.
func HolePunchResultExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"hole_punch_results\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if hole_punch_results exists")
	}

	return exists, nil
}
