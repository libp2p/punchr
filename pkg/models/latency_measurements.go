// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// LatencyMeasurement is an object representing the database table.
type LatencyMeasurement struct {
	ID                int                `boil:"id" json:"id" toml:"id" yaml:"id"`
	RemoteID          int64              `boil:"remote_id" json:"remote_id" toml:"remote_id" yaml:"remote_id"`
	HolePunchResultID int                `boil:"hole_punch_result_id" json:"hole_punch_result_id" toml:"hole_punch_result_id" yaml:"hole_punch_result_id"`
	MultiAddressID    int64              `boil:"multi_address_id" json:"multi_address_id" toml:"multi_address_id" yaml:"multi_address_id"`
	Mtype             string             `boil:"mtype" json:"mtype" toml:"mtype" yaml:"mtype"`
	RTTS              types.Float64Array `boil:"rtts" json:"rtts" toml:"rtts" yaml:"rtts"`
	RTTAvg            float64            `boil:"rtt_avg" json:"rtt_avg" toml:"rtt_avg" yaml:"rtt_avg"`
	RTTMax            float64            `boil:"rtt_max" json:"rtt_max" toml:"rtt_max" yaml:"rtt_max"`
	RTTMin            float64            `boil:"rtt_min" json:"rtt_min" toml:"rtt_min" yaml:"rtt_min"`
	RTTSTD            float64            `boil:"rtt_std" json:"rtt_std" toml:"rtt_std" yaml:"rtt_std"`

	R *latencyMeasurementR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L latencyMeasurementL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LatencyMeasurementColumns = struct {
	ID                string
	RemoteID          string
	HolePunchResultID string
	MultiAddressID    string
	Mtype             string
	RTTS              string
	RTTAvg            string
	RTTMax            string
	RTTMin            string
	RTTSTD            string
}{
	ID:                "id",
	RemoteID:          "remote_id",
	HolePunchResultID: "hole_punch_result_id",
	MultiAddressID:    "multi_address_id",
	Mtype:             "mtype",
	RTTS:              "rtts",
	RTTAvg:            "rtt_avg",
	RTTMax:            "rtt_max",
	RTTMin:            "rtt_min",
	RTTSTD:            "rtt_std",
}

var LatencyMeasurementTableColumns = struct {
	ID                string
	RemoteID          string
	HolePunchResultID string
	MultiAddressID    string
	Mtype             string
	RTTS              string
	RTTAvg            string
	RTTMax            string
	RTTMin            string
	RTTSTD            string
}{
	ID:                "latency_measurements.id",
	RemoteID:          "latency_measurements.remote_id",
	HolePunchResultID: "latency_measurements.hole_punch_result_id",
	MultiAddressID:    "latency_measurements.multi_address_id",
	Mtype:             "latency_measurements.mtype",
	RTTS:              "latency_measurements.rtts",
	RTTAvg:            "latency_measurements.rtt_avg",
	RTTMax:            "latency_measurements.rtt_max",
	RTTMin:            "latency_measurements.rtt_min",
	RTTSTD:            "latency_measurements.rtt_std",
}

// Generated where

type whereHelpertypes_Float64Array struct{ field string }

func (w whereHelpertypes_Float64Array) EQ(x types.Float64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Float64Array) NEQ(x types.Float64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Float64Array) LT(x types.Float64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Float64Array) LTE(x types.Float64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Float64Array) GT(x types.Float64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Float64Array) GTE(x types.Float64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var LatencyMeasurementWhere = struct {
	ID                whereHelperint
	RemoteID          whereHelperint64
	HolePunchResultID whereHelperint
	MultiAddressID    whereHelperint64
	Mtype             whereHelperstring
	RTTS              whereHelpertypes_Float64Array
	RTTAvg            whereHelperfloat64
	RTTMax            whereHelperfloat64
	RTTMin            whereHelperfloat64
	RTTSTD            whereHelperfloat64
}{
	ID:                whereHelperint{field: "\"latency_measurements\".\"id\""},
	RemoteID:          whereHelperint64{field: "\"latency_measurements\".\"remote_id\""},
	HolePunchResultID: whereHelperint{field: "\"latency_measurements\".\"hole_punch_result_id\""},
	MultiAddressID:    whereHelperint64{field: "\"latency_measurements\".\"multi_address_id\""},
	Mtype:             whereHelperstring{field: "\"latency_measurements\".\"mtype\""},
	RTTS:              whereHelpertypes_Float64Array{field: "\"latency_measurements\".\"rtts\""},
	RTTAvg:            whereHelperfloat64{field: "\"latency_measurements\".\"rtt_avg\""},
	RTTMax:            whereHelperfloat64{field: "\"latency_measurements\".\"rtt_max\""},
	RTTMin:            whereHelperfloat64{field: "\"latency_measurements\".\"rtt_min\""},
	RTTSTD:            whereHelperfloat64{field: "\"latency_measurements\".\"rtt_std\""},
}

// LatencyMeasurementRels is where relationship names are stored.
var LatencyMeasurementRels = struct {
	HolePunchResult string
	MultiAddress    string
	Remote          string
}{
	HolePunchResult: "HolePunchResult",
	MultiAddress:    "MultiAddress",
	Remote:          "Remote",
}

// latencyMeasurementR is where relationships are stored.
type latencyMeasurementR struct {
	HolePunchResult *HolePunchResult `boil:"HolePunchResult" json:"HolePunchResult" toml:"HolePunchResult" yaml:"HolePunchResult"`
	MultiAddress    *MultiAddress    `boil:"MultiAddress" json:"MultiAddress" toml:"MultiAddress" yaml:"MultiAddress"`
	Remote          *Peer            `boil:"Remote" json:"Remote" toml:"Remote" yaml:"Remote"`
}

// NewStruct creates a new relationship struct
func (*latencyMeasurementR) NewStruct() *latencyMeasurementR {
	return &latencyMeasurementR{}
}

func (r *latencyMeasurementR) GetHolePunchResult() *HolePunchResult {
	if r == nil {
		return nil
	}
	return r.HolePunchResult
}

func (r *latencyMeasurementR) GetMultiAddress() *MultiAddress {
	if r == nil {
		return nil
	}
	return r.MultiAddress
}

func (r *latencyMeasurementR) GetRemote() *Peer {
	if r == nil {
		return nil
	}
	return r.Remote
}

// latencyMeasurementL is where Load methods for each relationship are stored.
type latencyMeasurementL struct{}

var (
	latencyMeasurementAllColumns            = []string{"id", "remote_id", "hole_punch_result_id", "multi_address_id", "mtype", "rtts", "rtt_avg", "rtt_max", "rtt_min", "rtt_std"}
	latencyMeasurementColumnsWithoutDefault = []string{"remote_id", "hole_punch_result_id", "multi_address_id", "mtype", "rtts", "rtt_avg", "rtt_max", "rtt_min", "rtt_std"}
	latencyMeasurementColumnsWithDefault    = []string{"id"}
	latencyMeasurementPrimaryKeyColumns     = []string{"id"}
	latencyMeasurementGeneratedColumns      = []string{"id"}
)

type (
	// LatencyMeasurementSlice is an alias for a slice of pointers to LatencyMeasurement.
	// This should almost always be used instead of []LatencyMeasurement.
	LatencyMeasurementSlice []*LatencyMeasurement
	// LatencyMeasurementHook is the signature for custom LatencyMeasurement hook methods
	LatencyMeasurementHook func(context.Context, boil.ContextExecutor, *LatencyMeasurement) error

	latencyMeasurementQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	latencyMeasurementType                 = reflect.TypeOf(&LatencyMeasurement{})
	latencyMeasurementMapping              = queries.MakeStructMapping(latencyMeasurementType)
	latencyMeasurementPrimaryKeyMapping, _ = queries.BindMapping(latencyMeasurementType, latencyMeasurementMapping, latencyMeasurementPrimaryKeyColumns)
	latencyMeasurementInsertCacheMut       sync.RWMutex
	latencyMeasurementInsertCache          = make(map[string]insertCache)
	latencyMeasurementUpdateCacheMut       sync.RWMutex
	latencyMeasurementUpdateCache          = make(map[string]updateCache)
	latencyMeasurementUpsertCacheMut       sync.RWMutex
	latencyMeasurementUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var latencyMeasurementAfterSelectHooks []LatencyMeasurementHook

var latencyMeasurementBeforeInsertHooks []LatencyMeasurementHook
var latencyMeasurementAfterInsertHooks []LatencyMeasurementHook

var latencyMeasurementBeforeUpdateHooks []LatencyMeasurementHook
var latencyMeasurementAfterUpdateHooks []LatencyMeasurementHook

var latencyMeasurementBeforeDeleteHooks []LatencyMeasurementHook
var latencyMeasurementAfterDeleteHooks []LatencyMeasurementHook

var latencyMeasurementBeforeUpsertHooks []LatencyMeasurementHook
var latencyMeasurementAfterUpsertHooks []LatencyMeasurementHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LatencyMeasurement) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range latencyMeasurementAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LatencyMeasurement) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range latencyMeasurementBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LatencyMeasurement) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range latencyMeasurementAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LatencyMeasurement) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range latencyMeasurementBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LatencyMeasurement) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range latencyMeasurementAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LatencyMeasurement) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range latencyMeasurementBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LatencyMeasurement) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range latencyMeasurementAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LatencyMeasurement) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range latencyMeasurementBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LatencyMeasurement) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range latencyMeasurementAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLatencyMeasurementHook registers your hook function for all future operations.
func AddLatencyMeasurementHook(hookPoint boil.HookPoint, latencyMeasurementHook LatencyMeasurementHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		latencyMeasurementAfterSelectHooks = append(latencyMeasurementAfterSelectHooks, latencyMeasurementHook)
	case boil.BeforeInsertHook:
		latencyMeasurementBeforeInsertHooks = append(latencyMeasurementBeforeInsertHooks, latencyMeasurementHook)
	case boil.AfterInsertHook:
		latencyMeasurementAfterInsertHooks = append(latencyMeasurementAfterInsertHooks, latencyMeasurementHook)
	case boil.BeforeUpdateHook:
		latencyMeasurementBeforeUpdateHooks = append(latencyMeasurementBeforeUpdateHooks, latencyMeasurementHook)
	case boil.AfterUpdateHook:
		latencyMeasurementAfterUpdateHooks = append(latencyMeasurementAfterUpdateHooks, latencyMeasurementHook)
	case boil.BeforeDeleteHook:
		latencyMeasurementBeforeDeleteHooks = append(latencyMeasurementBeforeDeleteHooks, latencyMeasurementHook)
	case boil.AfterDeleteHook:
		latencyMeasurementAfterDeleteHooks = append(latencyMeasurementAfterDeleteHooks, latencyMeasurementHook)
	case boil.BeforeUpsertHook:
		latencyMeasurementBeforeUpsertHooks = append(latencyMeasurementBeforeUpsertHooks, latencyMeasurementHook)
	case boil.AfterUpsertHook:
		latencyMeasurementAfterUpsertHooks = append(latencyMeasurementAfterUpsertHooks, latencyMeasurementHook)
	}
}

// One returns a single latencyMeasurement record from the query.
func (q latencyMeasurementQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LatencyMeasurement, error) {
	o := &LatencyMeasurement{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for latency_measurements")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LatencyMeasurement records from the query.
func (q latencyMeasurementQuery) All(ctx context.Context, exec boil.ContextExecutor) (LatencyMeasurementSlice, error) {
	var o []*LatencyMeasurement

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to LatencyMeasurement slice")
	}

	if len(latencyMeasurementAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LatencyMeasurement records in the query.
func (q latencyMeasurementQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count latency_measurements rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q latencyMeasurementQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if latency_measurements exists")
	}

	return count > 0, nil
}

// HolePunchResult pointed to by the foreign key.
func (o *LatencyMeasurement) HolePunchResult(mods ...qm.QueryMod) holePunchResultQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.HolePunchResultID),
	}

	queryMods = append(queryMods, mods...)

	return HolePunchResults(queryMods...)
}

// MultiAddress pointed to by the foreign key.
func (o *LatencyMeasurement) MultiAddress(mods ...qm.QueryMod) multiAddressQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MultiAddressID),
	}

	queryMods = append(queryMods, mods...)

	return MultiAddresses(queryMods...)
}

// Remote pointed to by the foreign key.
func (o *LatencyMeasurement) Remote(mods ...qm.QueryMod) peerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RemoteID),
	}

	queryMods = append(queryMods, mods...)

	return Peers(queryMods...)
}

// LoadHolePunchResult allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (latencyMeasurementL) LoadHolePunchResult(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLatencyMeasurement interface{}, mods queries.Applicator) error {
	var slice []*LatencyMeasurement
	var object *LatencyMeasurement

	if singular {
		var ok bool
		object, ok = maybeLatencyMeasurement.(*LatencyMeasurement)
		if !ok {
			object = new(LatencyMeasurement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLatencyMeasurement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLatencyMeasurement))
			}
		}
	} else {
		s, ok := maybeLatencyMeasurement.(*[]*LatencyMeasurement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLatencyMeasurement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLatencyMeasurement))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &latencyMeasurementR{}
		}
		args = append(args, object.HolePunchResultID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &latencyMeasurementR{}
			}

			for _, a := range args {
				if a == obj.HolePunchResultID {
					continue Outer
				}
			}

			args = append(args, obj.HolePunchResultID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hole_punch_results`),
		qm.WhereIn(`hole_punch_results.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load HolePunchResult")
	}

	var resultSlice []*HolePunchResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice HolePunchResult")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for hole_punch_results")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hole_punch_results")
	}

	if len(latencyMeasurementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.HolePunchResult = foreign
		if foreign.R == nil {
			foreign.R = &holePunchResultR{}
		}
		foreign.R.LatencyMeasurements = append(foreign.R.LatencyMeasurements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.HolePunchResultID == foreign.ID {
				local.R.HolePunchResult = foreign
				if foreign.R == nil {
					foreign.R = &holePunchResultR{}
				}
				foreign.R.LatencyMeasurements = append(foreign.R.LatencyMeasurements, local)
				break
			}
		}
	}

	return nil
}

// LoadMultiAddress allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (latencyMeasurementL) LoadMultiAddress(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLatencyMeasurement interface{}, mods queries.Applicator) error {
	var slice []*LatencyMeasurement
	var object *LatencyMeasurement

	if singular {
		var ok bool
		object, ok = maybeLatencyMeasurement.(*LatencyMeasurement)
		if !ok {
			object = new(LatencyMeasurement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLatencyMeasurement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLatencyMeasurement))
			}
		}
	} else {
		s, ok := maybeLatencyMeasurement.(*[]*LatencyMeasurement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLatencyMeasurement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLatencyMeasurement))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &latencyMeasurementR{}
		}
		args = append(args, object.MultiAddressID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &latencyMeasurementR{}
			}

			for _, a := range args {
				if a == obj.MultiAddressID {
					continue Outer
				}
			}

			args = append(args, obj.MultiAddressID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`multi_addresses`),
		qm.WhereIn(`multi_addresses.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MultiAddress")
	}

	var resultSlice []*MultiAddress
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MultiAddress")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for multi_addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for multi_addresses")
	}

	if len(latencyMeasurementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MultiAddress = foreign
		if foreign.R == nil {
			foreign.R = &multiAddressR{}
		}
		foreign.R.LatencyMeasurements = append(foreign.R.LatencyMeasurements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MultiAddressID == foreign.ID {
				local.R.MultiAddress = foreign
				if foreign.R == nil {
					foreign.R = &multiAddressR{}
				}
				foreign.R.LatencyMeasurements = append(foreign.R.LatencyMeasurements, local)
				break
			}
		}
	}

	return nil
}

// LoadRemote allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (latencyMeasurementL) LoadRemote(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLatencyMeasurement interface{}, mods queries.Applicator) error {
	var slice []*LatencyMeasurement
	var object *LatencyMeasurement

	if singular {
		var ok bool
		object, ok = maybeLatencyMeasurement.(*LatencyMeasurement)
		if !ok {
			object = new(LatencyMeasurement)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLatencyMeasurement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLatencyMeasurement))
			}
		}
	} else {
		s, ok := maybeLatencyMeasurement.(*[]*LatencyMeasurement)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLatencyMeasurement)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLatencyMeasurement))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &latencyMeasurementR{}
		}
		args = append(args, object.RemoteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &latencyMeasurementR{}
			}

			for _, a := range args {
				if a == obj.RemoteID {
					continue Outer
				}
			}

			args = append(args, obj.RemoteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peers`),
		qm.WhereIn(`peers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Peer")
	}

	var resultSlice []*Peer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Peer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for peers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peers")
	}

	if len(latencyMeasurementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Remote = foreign
		if foreign.R == nil {
			foreign.R = &peerR{}
		}
		foreign.R.RemoteLatencyMeasurements = append(foreign.R.RemoteLatencyMeasurements, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RemoteID == foreign.ID {
				local.R.Remote = foreign
				if foreign.R == nil {
					foreign.R = &peerR{}
				}
				foreign.R.RemoteLatencyMeasurements = append(foreign.R.RemoteLatencyMeasurements, local)
				break
			}
		}
	}

	return nil
}

// SetHolePunchResult of the latencyMeasurement to the related item.
// Sets o.R.HolePunchResult to related.
// Adds o to related.R.LatencyMeasurements.
func (o *LatencyMeasurement) SetHolePunchResult(ctx context.Context, exec boil.ContextExecutor, insert bool, related *HolePunchResult) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"latency_measurements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"hole_punch_result_id"}),
		strmangle.WhereClause("\"", "\"", 2, latencyMeasurementPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.HolePunchResultID = related.ID
	if o.R == nil {
		o.R = &latencyMeasurementR{
			HolePunchResult: related,
		}
	} else {
		o.R.HolePunchResult = related
	}

	if related.R == nil {
		related.R = &holePunchResultR{
			LatencyMeasurements: LatencyMeasurementSlice{o},
		}
	} else {
		related.R.LatencyMeasurements = append(related.R.LatencyMeasurements, o)
	}

	return nil
}

// SetMultiAddress of the latencyMeasurement to the related item.
// Sets o.R.MultiAddress to related.
// Adds o to related.R.LatencyMeasurements.
func (o *LatencyMeasurement) SetMultiAddress(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MultiAddress) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"latency_measurements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"multi_address_id"}),
		strmangle.WhereClause("\"", "\"", 2, latencyMeasurementPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MultiAddressID = related.ID
	if o.R == nil {
		o.R = &latencyMeasurementR{
			MultiAddress: related,
		}
	} else {
		o.R.MultiAddress = related
	}

	if related.R == nil {
		related.R = &multiAddressR{
			LatencyMeasurements: LatencyMeasurementSlice{o},
		}
	} else {
		related.R.LatencyMeasurements = append(related.R.LatencyMeasurements, o)
	}

	return nil
}

// SetRemote of the latencyMeasurement to the related item.
// Sets o.R.Remote to related.
// Adds o to related.R.RemoteLatencyMeasurements.
func (o *LatencyMeasurement) SetRemote(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Peer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"latency_measurements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"remote_id"}),
		strmangle.WhereClause("\"", "\"", 2, latencyMeasurementPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RemoteID = related.ID
	if o.R == nil {
		o.R = &latencyMeasurementR{
			Remote: related,
		}
	} else {
		o.R.Remote = related
	}

	if related.R == nil {
		related.R = &peerR{
			RemoteLatencyMeasurements: LatencyMeasurementSlice{o},
		}
	} else {
		related.R.RemoteLatencyMeasurements = append(related.R.RemoteLatencyMeasurements, o)
	}

	return nil
}

// LatencyMeasurements retrieves all the records using an executor.
func LatencyMeasurements(mods ...qm.QueryMod) latencyMeasurementQuery {
	mods = append(mods, qm.From("\"latency_measurements\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"latency_measurements\".*"})
	}

	return latencyMeasurementQuery{q}
}

// FindLatencyMeasurement retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLatencyMeasurement(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*LatencyMeasurement, error) {
	latencyMeasurementObj := &LatencyMeasurement{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"latency_measurements\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, latencyMeasurementObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from latency_measurements")
	}

	if err = latencyMeasurementObj.doAfterSelectHooks(ctx, exec); err != nil {
		return latencyMeasurementObj, err
	}

	return latencyMeasurementObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LatencyMeasurement) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no latency_measurements provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(latencyMeasurementColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	latencyMeasurementInsertCacheMut.RLock()
	cache, cached := latencyMeasurementInsertCache[key]
	latencyMeasurementInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			latencyMeasurementAllColumns,
			latencyMeasurementColumnsWithDefault,
			latencyMeasurementColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, latencyMeasurementGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(latencyMeasurementType, latencyMeasurementMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(latencyMeasurementType, latencyMeasurementMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"latency_measurements\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"latency_measurements\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into latency_measurements")
	}

	if !cached {
		latencyMeasurementInsertCacheMut.Lock()
		latencyMeasurementInsertCache[key] = cache
		latencyMeasurementInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LatencyMeasurement.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LatencyMeasurement) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	latencyMeasurementUpdateCacheMut.RLock()
	cache, cached := latencyMeasurementUpdateCache[key]
	latencyMeasurementUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			latencyMeasurementAllColumns,
			latencyMeasurementPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, latencyMeasurementGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update latency_measurements, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"latency_measurements\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, latencyMeasurementPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(latencyMeasurementType, latencyMeasurementMapping, append(wl, latencyMeasurementPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update latency_measurements row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for latency_measurements")
	}

	if !cached {
		latencyMeasurementUpdateCacheMut.Lock()
		latencyMeasurementUpdateCache[key] = cache
		latencyMeasurementUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q latencyMeasurementQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for latency_measurements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for latency_measurements")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LatencyMeasurementSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), latencyMeasurementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"latency_measurements\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, latencyMeasurementPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in latencyMeasurement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all latencyMeasurement")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LatencyMeasurement) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no latency_measurements provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(latencyMeasurementColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	latencyMeasurementUpsertCacheMut.RLock()
	cache, cached := latencyMeasurementUpsertCache[key]
	latencyMeasurementUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			latencyMeasurementAllColumns,
			latencyMeasurementColumnsWithDefault,
			latencyMeasurementColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			latencyMeasurementAllColumns,
			latencyMeasurementPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, latencyMeasurementGeneratedColumns)
		update = strmangle.SetComplement(update, latencyMeasurementGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert latency_measurements, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(latencyMeasurementPrimaryKeyColumns))
			copy(conflict, latencyMeasurementPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"latency_measurements\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(latencyMeasurementType, latencyMeasurementMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(latencyMeasurementType, latencyMeasurementMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert latency_measurements")
	}

	if !cached {
		latencyMeasurementUpsertCacheMut.Lock()
		latencyMeasurementUpsertCache[key] = cache
		latencyMeasurementUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LatencyMeasurement record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LatencyMeasurement) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LatencyMeasurement provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), latencyMeasurementPrimaryKeyMapping)
	sql := "DELETE FROM \"latency_measurements\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from latency_measurements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for latency_measurements")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q latencyMeasurementQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no latencyMeasurementQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from latency_measurements")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for latency_measurements")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LatencyMeasurementSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(latencyMeasurementBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), latencyMeasurementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"latency_measurements\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, latencyMeasurementPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from latencyMeasurement slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for latency_measurements")
	}

	if len(latencyMeasurementAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LatencyMeasurement) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLatencyMeasurement(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LatencyMeasurementSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LatencyMeasurementSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), latencyMeasurementPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"latency_measurements\".* FROM \"latency_measurements\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, latencyMeasurementPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LatencyMeasurementSlice")
	}

	*o = slice

	return nil
}

// LatencyMeasurementExists checks if the LatencyMeasurement row exists.
func LatencyMeasurementExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"latency_measurements\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if latency_measurements exists")
	}

	return exists, nil
}
