// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Peer is an object representing the database table.
type Peer struct {
	ID           int64             `boil:"id" json:"id" toml:"id" yaml:"id"`
	MultiHash    string            `boil:"multi_hash" json:"multi_hash" toml:"multi_hash" yaml:"multi_hash"`
	AgentVersion null.String       `boil:"agent_version" json:"agent_version,omitempty" toml:"agent_version" yaml:"agent_version,omitempty"`
	Protocols    types.StringArray `boil:"protocols" json:"protocols,omitempty" toml:"protocols" yaml:"protocols,omitempty"`
	UpdatedAt    time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt    time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *peerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L peerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PeerColumns = struct {
	ID           string
	MultiHash    string
	AgentVersion string
	Protocols    string
	UpdatedAt    string
	CreatedAt    string
}{
	ID:           "id",
	MultiHash:    "multi_hash",
	AgentVersion: "agent_version",
	Protocols:    "protocols",
	UpdatedAt:    "updated_at",
	CreatedAt:    "created_at",
}

var PeerTableColumns = struct {
	ID           string
	MultiHash    string
	AgentVersion string
	Protocols    string
	UpdatedAt    string
	CreatedAt    string
}{
	ID:           "peers.id",
	MultiHash:    "peers.multi_hash",
	AgentVersion: "peers.agent_version",
	Protocols:    "peers.protocols",
	UpdatedAt:    "peers.updated_at",
	CreatedAt:    "peers.created_at",
}

// Generated where

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_StringArray) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_StringArray) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var PeerWhere = struct {
	ID           whereHelperint64
	MultiHash    whereHelperstring
	AgentVersion whereHelpernull_String
	Protocols    whereHelpertypes_StringArray
	UpdatedAt    whereHelpertime_Time
	CreatedAt    whereHelpertime_Time
}{
	ID:           whereHelperint64{field: "\"peers\".\"id\""},
	MultiHash:    whereHelperstring{field: "\"peers\".\"multi_hash\""},
	AgentVersion: whereHelpernull_String{field: "\"peers\".\"agent_version\""},
	Protocols:    whereHelpertypes_StringArray{field: "\"peers\".\"protocols\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"peers\".\"updated_at\""},
	CreatedAt:    whereHelpertime_Time{field: "\"peers\".\"created_at\""},
}

// PeerRels is where relationship names are stored.
var PeerRels = struct {
	Clients                   string
	LocalConnectionEvents     string
	RemoteConnectionEvents    string
	LocalHolePunchResults     string
	RemoteHolePunchResults    string
	RemoteLatencyMeasurements string
	NetworkInformations       string
	PeerLogs                  string
}{
	Clients:                   "Clients",
	LocalConnectionEvents:     "LocalConnectionEvents",
	RemoteConnectionEvents:    "RemoteConnectionEvents",
	LocalHolePunchResults:     "LocalHolePunchResults",
	RemoteHolePunchResults:    "RemoteHolePunchResults",
	RemoteLatencyMeasurements: "RemoteLatencyMeasurements",
	NetworkInformations:       "NetworkInformations",
	PeerLogs:                  "PeerLogs",
}

// peerR is where relationships are stored.
type peerR struct {
	Clients                   ClientSlice             `boil:"Clients" json:"Clients" toml:"Clients" yaml:"Clients"`
	LocalConnectionEvents     ConnectionEventSlice    `boil:"LocalConnectionEvents" json:"LocalConnectionEvents" toml:"LocalConnectionEvents" yaml:"LocalConnectionEvents"`
	RemoteConnectionEvents    ConnectionEventSlice    `boil:"RemoteConnectionEvents" json:"RemoteConnectionEvents" toml:"RemoteConnectionEvents" yaml:"RemoteConnectionEvents"`
	LocalHolePunchResults     HolePunchResultSlice    `boil:"LocalHolePunchResults" json:"LocalHolePunchResults" toml:"LocalHolePunchResults" yaml:"LocalHolePunchResults"`
	RemoteHolePunchResults    HolePunchResultSlice    `boil:"RemoteHolePunchResults" json:"RemoteHolePunchResults" toml:"RemoteHolePunchResults" yaml:"RemoteHolePunchResults"`
	RemoteLatencyMeasurements LatencyMeasurementSlice `boil:"RemoteLatencyMeasurements" json:"RemoteLatencyMeasurements" toml:"RemoteLatencyMeasurements" yaml:"RemoteLatencyMeasurements"`
	NetworkInformations       NetworkInformationSlice `boil:"NetworkInformations" json:"NetworkInformations" toml:"NetworkInformations" yaml:"NetworkInformations"`
	PeerLogs                  PeerLogSlice            `boil:"PeerLogs" json:"PeerLogs" toml:"PeerLogs" yaml:"PeerLogs"`
}

// NewStruct creates a new relationship struct
func (*peerR) NewStruct() *peerR {
	return &peerR{}
}

func (r *peerR) GetClients() ClientSlice {
	if r == nil {
		return nil
	}
	return r.Clients
}

func (r *peerR) GetLocalConnectionEvents() ConnectionEventSlice {
	if r == nil {
		return nil
	}
	return r.LocalConnectionEvents
}

func (r *peerR) GetRemoteConnectionEvents() ConnectionEventSlice {
	if r == nil {
		return nil
	}
	return r.RemoteConnectionEvents
}

func (r *peerR) GetLocalHolePunchResults() HolePunchResultSlice {
	if r == nil {
		return nil
	}
	return r.LocalHolePunchResults
}

func (r *peerR) GetRemoteHolePunchResults() HolePunchResultSlice {
	if r == nil {
		return nil
	}
	return r.RemoteHolePunchResults
}

func (r *peerR) GetRemoteLatencyMeasurements() LatencyMeasurementSlice {
	if r == nil {
		return nil
	}
	return r.RemoteLatencyMeasurements
}

func (r *peerR) GetNetworkInformations() NetworkInformationSlice {
	if r == nil {
		return nil
	}
	return r.NetworkInformations
}

func (r *peerR) GetPeerLogs() PeerLogSlice {
	if r == nil {
		return nil
	}
	return r.PeerLogs
}

// peerL is where Load methods for each relationship are stored.
type peerL struct{}

var (
	peerAllColumns            = []string{"id", "multi_hash", "agent_version", "protocols", "updated_at", "created_at"}
	peerColumnsWithoutDefault = []string{"multi_hash", "updated_at", "created_at"}
	peerColumnsWithDefault    = []string{"id", "agent_version", "protocols"}
	peerPrimaryKeyColumns     = []string{"id"}
	peerGeneratedColumns      = []string{"id"}
)

type (
	// PeerSlice is an alias for a slice of pointers to Peer.
	// This should almost always be used instead of []Peer.
	PeerSlice []*Peer
	// PeerHook is the signature for custom Peer hook methods
	PeerHook func(context.Context, boil.ContextExecutor, *Peer) error

	peerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	peerType                 = reflect.TypeOf(&Peer{})
	peerMapping              = queries.MakeStructMapping(peerType)
	peerPrimaryKeyMapping, _ = queries.BindMapping(peerType, peerMapping, peerPrimaryKeyColumns)
	peerInsertCacheMut       sync.RWMutex
	peerInsertCache          = make(map[string]insertCache)
	peerUpdateCacheMut       sync.RWMutex
	peerUpdateCache          = make(map[string]updateCache)
	peerUpsertCacheMut       sync.RWMutex
	peerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var peerAfterSelectHooks []PeerHook

var peerBeforeInsertHooks []PeerHook
var peerAfterInsertHooks []PeerHook

var peerBeforeUpdateHooks []PeerHook
var peerAfterUpdateHooks []PeerHook

var peerBeforeDeleteHooks []PeerHook
var peerAfterDeleteHooks []PeerHook

var peerBeforeUpsertHooks []PeerHook
var peerAfterUpsertHooks []PeerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Peer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Peer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Peer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Peer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Peer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Peer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Peer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Peer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Peer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range peerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPeerHook registers your hook function for all future operations.
func AddPeerHook(hookPoint boil.HookPoint, peerHook PeerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		peerAfterSelectHooks = append(peerAfterSelectHooks, peerHook)
	case boil.BeforeInsertHook:
		peerBeforeInsertHooks = append(peerBeforeInsertHooks, peerHook)
	case boil.AfterInsertHook:
		peerAfterInsertHooks = append(peerAfterInsertHooks, peerHook)
	case boil.BeforeUpdateHook:
		peerBeforeUpdateHooks = append(peerBeforeUpdateHooks, peerHook)
	case boil.AfterUpdateHook:
		peerAfterUpdateHooks = append(peerAfterUpdateHooks, peerHook)
	case boil.BeforeDeleteHook:
		peerBeforeDeleteHooks = append(peerBeforeDeleteHooks, peerHook)
	case boil.AfterDeleteHook:
		peerAfterDeleteHooks = append(peerAfterDeleteHooks, peerHook)
	case boil.BeforeUpsertHook:
		peerBeforeUpsertHooks = append(peerBeforeUpsertHooks, peerHook)
	case boil.AfterUpsertHook:
		peerAfterUpsertHooks = append(peerAfterUpsertHooks, peerHook)
	}
}

// One returns a single peer record from the query.
func (q peerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Peer, error) {
	o := &Peer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for peers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Peer records from the query.
func (q peerQuery) All(ctx context.Context, exec boil.ContextExecutor) (PeerSlice, error) {
	var o []*Peer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Peer slice")
	}

	if len(peerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Peer records in the query.
func (q peerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count peers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q peerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if peers exists")
	}

	return count > 0, nil
}

// Clients retrieves all the client's Clients with an executor.
func (o *Peer) Clients(mods ...qm.QueryMod) clientQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"clients\".\"peer_id\"=?", o.ID),
	)

	return Clients(queryMods...)
}

// LocalConnectionEvents retrieves all the connection_event's ConnectionEvents with an executor via local_id column.
func (o *Peer) LocalConnectionEvents(mods ...qm.QueryMod) connectionEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"connection_events\".\"local_id\"=?", o.ID),
	)

	return ConnectionEvents(queryMods...)
}

// RemoteConnectionEvents retrieves all the connection_event's ConnectionEvents with an executor via remote_id column.
func (o *Peer) RemoteConnectionEvents(mods ...qm.QueryMod) connectionEventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"connection_events\".\"remote_id\"=?", o.ID),
	)

	return ConnectionEvents(queryMods...)
}

// LocalHolePunchResults retrieves all the hole_punch_result's HolePunchResults with an executor via local_id column.
func (o *Peer) LocalHolePunchResults(mods ...qm.QueryMod) holePunchResultQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"hole_punch_results\".\"local_id\"=?", o.ID),
	)

	return HolePunchResults(queryMods...)
}

// RemoteHolePunchResults retrieves all the hole_punch_result's HolePunchResults with an executor via remote_id column.
func (o *Peer) RemoteHolePunchResults(mods ...qm.QueryMod) holePunchResultQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"hole_punch_results\".\"remote_id\"=?", o.ID),
	)

	return HolePunchResults(queryMods...)
}

// RemoteLatencyMeasurements retrieves all the latency_measurement's LatencyMeasurements with an executor via remote_id column.
func (o *Peer) RemoteLatencyMeasurements(mods ...qm.QueryMod) latencyMeasurementQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"latency_measurements\".\"remote_id\"=?", o.ID),
	)

	return LatencyMeasurements(queryMods...)
}

// NetworkInformations retrieves all the network_information's NetworkInformations with an executor.
func (o *Peer) NetworkInformations(mods ...qm.QueryMod) networkInformationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"network_information\".\"peer_id\"=?", o.ID),
	)

	return NetworkInformations(queryMods...)
}

// PeerLogs retrieves all the peer_log's PeerLogs with an executor.
func (o *Peer) PeerLogs(mods ...qm.QueryMod) peerLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"peer_logs\".\"peer_id\"=?", o.ID),
	)

	return PeerLogs(queryMods...)
}

// LoadClients allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (peerL) LoadClients(ctx context.Context, e boil.ContextExecutor, singular bool, maybePeer interface{}, mods queries.Applicator) error {
	var slice []*Peer
	var object *Peer

	if singular {
		var ok bool
		object, ok = maybePeer.(*Peer)
		if !ok {
			object = new(Peer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePeer))
			}
		}
	} else {
		s, ok := maybePeer.(*[]*Peer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePeer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &peerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &peerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`clients`),
		qm.WhereIn(`clients.peer_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load clients")
	}

	var resultSlice []*Client
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice clients")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on clients")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for clients")
	}

	if len(clientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Clients = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &clientR{}
			}
			foreign.R.Peer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PeerID {
				local.R.Clients = append(local.R.Clients, foreign)
				if foreign.R == nil {
					foreign.R = &clientR{}
				}
				foreign.R.Peer = local
				break
			}
		}
	}

	return nil
}

// LoadLocalConnectionEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (peerL) LoadLocalConnectionEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybePeer interface{}, mods queries.Applicator) error {
	var slice []*Peer
	var object *Peer

	if singular {
		var ok bool
		object, ok = maybePeer.(*Peer)
		if !ok {
			object = new(Peer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePeer))
			}
		}
	} else {
		s, ok := maybePeer.(*[]*Peer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePeer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &peerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &peerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`connection_events`),
		qm.WhereIn(`connection_events.local_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load connection_events")
	}

	var resultSlice []*ConnectionEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice connection_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on connection_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for connection_events")
	}

	if len(connectionEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LocalConnectionEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &connectionEventR{}
			}
			foreign.R.Local = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.LocalID {
				local.R.LocalConnectionEvents = append(local.R.LocalConnectionEvents, foreign)
				if foreign.R == nil {
					foreign.R = &connectionEventR{}
				}
				foreign.R.Local = local
				break
			}
		}
	}

	return nil
}

// LoadRemoteConnectionEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (peerL) LoadRemoteConnectionEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybePeer interface{}, mods queries.Applicator) error {
	var slice []*Peer
	var object *Peer

	if singular {
		var ok bool
		object, ok = maybePeer.(*Peer)
		if !ok {
			object = new(Peer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePeer))
			}
		}
	} else {
		s, ok := maybePeer.(*[]*Peer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePeer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &peerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &peerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`connection_events`),
		qm.WhereIn(`connection_events.remote_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load connection_events")
	}

	var resultSlice []*ConnectionEvent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice connection_events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on connection_events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for connection_events")
	}

	if len(connectionEventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RemoteConnectionEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &connectionEventR{}
			}
			foreign.R.Remote = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RemoteID {
				local.R.RemoteConnectionEvents = append(local.R.RemoteConnectionEvents, foreign)
				if foreign.R == nil {
					foreign.R = &connectionEventR{}
				}
				foreign.R.Remote = local
				break
			}
		}
	}

	return nil
}

// LoadLocalHolePunchResults allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (peerL) LoadLocalHolePunchResults(ctx context.Context, e boil.ContextExecutor, singular bool, maybePeer interface{}, mods queries.Applicator) error {
	var slice []*Peer
	var object *Peer

	if singular {
		var ok bool
		object, ok = maybePeer.(*Peer)
		if !ok {
			object = new(Peer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePeer))
			}
		}
	} else {
		s, ok := maybePeer.(*[]*Peer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePeer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &peerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &peerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hole_punch_results`),
		qm.WhereIn(`hole_punch_results.local_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load hole_punch_results")
	}

	var resultSlice []*HolePunchResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice hole_punch_results")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on hole_punch_results")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hole_punch_results")
	}

	if len(holePunchResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LocalHolePunchResults = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &holePunchResultR{}
			}
			foreign.R.Local = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.LocalID {
				local.R.LocalHolePunchResults = append(local.R.LocalHolePunchResults, foreign)
				if foreign.R == nil {
					foreign.R = &holePunchResultR{}
				}
				foreign.R.Local = local
				break
			}
		}
	}

	return nil
}

// LoadRemoteHolePunchResults allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (peerL) LoadRemoteHolePunchResults(ctx context.Context, e boil.ContextExecutor, singular bool, maybePeer interface{}, mods queries.Applicator) error {
	var slice []*Peer
	var object *Peer

	if singular {
		var ok bool
		object, ok = maybePeer.(*Peer)
		if !ok {
			object = new(Peer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePeer))
			}
		}
	} else {
		s, ok := maybePeer.(*[]*Peer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePeer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &peerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &peerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`hole_punch_results`),
		qm.WhereIn(`hole_punch_results.remote_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load hole_punch_results")
	}

	var resultSlice []*HolePunchResult
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice hole_punch_results")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on hole_punch_results")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for hole_punch_results")
	}

	if len(holePunchResultAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RemoteHolePunchResults = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &holePunchResultR{}
			}
			foreign.R.Remote = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RemoteID {
				local.R.RemoteHolePunchResults = append(local.R.RemoteHolePunchResults, foreign)
				if foreign.R == nil {
					foreign.R = &holePunchResultR{}
				}
				foreign.R.Remote = local
				break
			}
		}
	}

	return nil
}

// LoadRemoteLatencyMeasurements allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (peerL) LoadRemoteLatencyMeasurements(ctx context.Context, e boil.ContextExecutor, singular bool, maybePeer interface{}, mods queries.Applicator) error {
	var slice []*Peer
	var object *Peer

	if singular {
		var ok bool
		object, ok = maybePeer.(*Peer)
		if !ok {
			object = new(Peer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePeer))
			}
		}
	} else {
		s, ok := maybePeer.(*[]*Peer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePeer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &peerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &peerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`latency_measurements`),
		qm.WhereIn(`latency_measurements.remote_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load latency_measurements")
	}

	var resultSlice []*LatencyMeasurement
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice latency_measurements")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on latency_measurements")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for latency_measurements")
	}

	if len(latencyMeasurementAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RemoteLatencyMeasurements = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &latencyMeasurementR{}
			}
			foreign.R.Remote = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RemoteID {
				local.R.RemoteLatencyMeasurements = append(local.R.RemoteLatencyMeasurements, foreign)
				if foreign.R == nil {
					foreign.R = &latencyMeasurementR{}
				}
				foreign.R.Remote = local
				break
			}
		}
	}

	return nil
}

// LoadNetworkInformations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (peerL) LoadNetworkInformations(ctx context.Context, e boil.ContextExecutor, singular bool, maybePeer interface{}, mods queries.Applicator) error {
	var slice []*Peer
	var object *Peer

	if singular {
		var ok bool
		object, ok = maybePeer.(*Peer)
		if !ok {
			object = new(Peer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePeer))
			}
		}
	} else {
		s, ok := maybePeer.(*[]*Peer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePeer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &peerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &peerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`network_information`),
		qm.WhereIn(`network_information.peer_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load network_information")
	}

	var resultSlice []*NetworkInformation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice network_information")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on network_information")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for network_information")
	}

	if len(networkInformationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.NetworkInformations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &networkInformationR{}
			}
			foreign.R.Peer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PeerID {
				local.R.NetworkInformations = append(local.R.NetworkInformations, foreign)
				if foreign.R == nil {
					foreign.R = &networkInformationR{}
				}
				foreign.R.Peer = local
				break
			}
		}
	}

	return nil
}

// LoadPeerLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (peerL) LoadPeerLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybePeer interface{}, mods queries.Applicator) error {
	var slice []*Peer
	var object *Peer

	if singular {
		var ok bool
		object, ok = maybePeer.(*Peer)
		if !ok {
			object = new(Peer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePeer))
			}
		}
	} else {
		s, ok := maybePeer.(*[]*Peer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePeer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePeer))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &peerR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &peerR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`peer_logs`),
		qm.WhereIn(`peer_logs.peer_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load peer_logs")
	}

	var resultSlice []*PeerLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice peer_logs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on peer_logs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for peer_logs")
	}

	if len(peerLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.PeerLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &peerLogR{}
			}
			foreign.R.Peer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.PeerID {
				local.R.PeerLogs = append(local.R.PeerLogs, foreign)
				if foreign.R == nil {
					foreign.R = &peerLogR{}
				}
				foreign.R.Peer = local
				break
			}
		}
	}

	return nil
}

// AddClients adds the given related objects to the existing relationships
// of the peer, optionally inserting them as new records.
// Appends related to o.R.Clients.
// Sets related.R.Peer appropriately.
func (o *Peer) AddClients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Client) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PeerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"clients\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"peer_id"}),
				strmangle.WhereClause("\"", "\"", 2, clientPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PeerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &peerR{
			Clients: related,
		}
	} else {
		o.R.Clients = append(o.R.Clients, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &clientR{
				Peer: o,
			}
		} else {
			rel.R.Peer = o
		}
	}
	return nil
}

// AddLocalConnectionEvents adds the given related objects to the existing relationships
// of the peer, optionally inserting them as new records.
// Appends related to o.R.LocalConnectionEvents.
// Sets related.R.Local appropriately.
func (o *Peer) AddLocalConnectionEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ConnectionEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.LocalID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"connection_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"local_id"}),
				strmangle.WhereClause("\"", "\"", 2, connectionEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.LocalID = o.ID
		}
	}

	if o.R == nil {
		o.R = &peerR{
			LocalConnectionEvents: related,
		}
	} else {
		o.R.LocalConnectionEvents = append(o.R.LocalConnectionEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &connectionEventR{
				Local: o,
			}
		} else {
			rel.R.Local = o
		}
	}
	return nil
}

// AddRemoteConnectionEvents adds the given related objects to the existing relationships
// of the peer, optionally inserting them as new records.
// Appends related to o.R.RemoteConnectionEvents.
// Sets related.R.Remote appropriately.
func (o *Peer) AddRemoteConnectionEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ConnectionEvent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RemoteID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"connection_events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"remote_id"}),
				strmangle.WhereClause("\"", "\"", 2, connectionEventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RemoteID = o.ID
		}
	}

	if o.R == nil {
		o.R = &peerR{
			RemoteConnectionEvents: related,
		}
	} else {
		o.R.RemoteConnectionEvents = append(o.R.RemoteConnectionEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &connectionEventR{
				Remote: o,
			}
		} else {
			rel.R.Remote = o
		}
	}
	return nil
}

// AddLocalHolePunchResults adds the given related objects to the existing relationships
// of the peer, optionally inserting them as new records.
// Appends related to o.R.LocalHolePunchResults.
// Sets related.R.Local appropriately.
func (o *Peer) AddLocalHolePunchResults(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*HolePunchResult) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.LocalID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"hole_punch_results\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"local_id"}),
				strmangle.WhereClause("\"", "\"", 2, holePunchResultPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.LocalID = o.ID
		}
	}

	if o.R == nil {
		o.R = &peerR{
			LocalHolePunchResults: related,
		}
	} else {
		o.R.LocalHolePunchResults = append(o.R.LocalHolePunchResults, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &holePunchResultR{
				Local: o,
			}
		} else {
			rel.R.Local = o
		}
	}
	return nil
}

// AddRemoteHolePunchResults adds the given related objects to the existing relationships
// of the peer, optionally inserting them as new records.
// Appends related to o.R.RemoteHolePunchResults.
// Sets related.R.Remote appropriately.
func (o *Peer) AddRemoteHolePunchResults(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*HolePunchResult) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RemoteID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"hole_punch_results\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"remote_id"}),
				strmangle.WhereClause("\"", "\"", 2, holePunchResultPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RemoteID = o.ID
		}
	}

	if o.R == nil {
		o.R = &peerR{
			RemoteHolePunchResults: related,
		}
	} else {
		o.R.RemoteHolePunchResults = append(o.R.RemoteHolePunchResults, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &holePunchResultR{
				Remote: o,
			}
		} else {
			rel.R.Remote = o
		}
	}
	return nil
}

// AddRemoteLatencyMeasurements adds the given related objects to the existing relationships
// of the peer, optionally inserting them as new records.
// Appends related to o.R.RemoteLatencyMeasurements.
// Sets related.R.Remote appropriately.
func (o *Peer) AddRemoteLatencyMeasurements(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*LatencyMeasurement) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RemoteID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"latency_measurements\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"remote_id"}),
				strmangle.WhereClause("\"", "\"", 2, latencyMeasurementPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RemoteID = o.ID
		}
	}

	if o.R == nil {
		o.R = &peerR{
			RemoteLatencyMeasurements: related,
		}
	} else {
		o.R.RemoteLatencyMeasurements = append(o.R.RemoteLatencyMeasurements, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &latencyMeasurementR{
				Remote: o,
			}
		} else {
			rel.R.Remote = o
		}
	}
	return nil
}

// AddNetworkInformations adds the given related objects to the existing relationships
// of the peer, optionally inserting them as new records.
// Appends related to o.R.NetworkInformations.
// Sets related.R.Peer appropriately.
func (o *Peer) AddNetworkInformations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*NetworkInformation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PeerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"network_information\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"peer_id"}),
				strmangle.WhereClause("\"", "\"", 2, networkInformationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PeerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &peerR{
			NetworkInformations: related,
		}
	} else {
		o.R.NetworkInformations = append(o.R.NetworkInformations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &networkInformationR{
				Peer: o,
			}
		} else {
			rel.R.Peer = o
		}
	}
	return nil
}

// AddPeerLogs adds the given related objects to the existing relationships
// of the peer, optionally inserting them as new records.
// Appends related to o.R.PeerLogs.
// Sets related.R.Peer appropriately.
func (o *Peer) AddPeerLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PeerLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PeerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"peer_logs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"peer_id"}),
				strmangle.WhereClause("\"", "\"", 2, peerLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PeerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &peerR{
			PeerLogs: related,
		}
	} else {
		o.R.PeerLogs = append(o.R.PeerLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &peerLogR{
				Peer: o,
			}
		} else {
			rel.R.Peer = o
		}
	}
	return nil
}

// Peers retrieves all the records using an executor.
func Peers(mods ...qm.QueryMod) peerQuery {
	mods = append(mods, qm.From("\"peers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"peers\".*"})
	}

	return peerQuery{q}
}

// FindPeer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPeer(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Peer, error) {
	peerObj := &Peer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"peers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, peerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from peers")
	}

	if err = peerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return peerObj, err
	}

	return peerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Peer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no peers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(peerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	peerInsertCacheMut.RLock()
	cache, cached := peerInsertCache[key]
	peerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			peerAllColumns,
			peerColumnsWithDefault,
			peerColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, peerGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(peerType, peerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(peerType, peerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"peers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"peers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into peers")
	}

	if !cached {
		peerInsertCacheMut.Lock()
		peerInsertCache[key] = cache
		peerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Peer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Peer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	peerUpdateCacheMut.RLock()
	cache, cached := peerUpdateCache[key]
	peerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			peerAllColumns,
			peerPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, peerGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update peers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"peers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, peerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(peerType, peerMapping, append(wl, peerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update peers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for peers")
	}

	if !cached {
		peerUpdateCacheMut.Lock()
		peerUpdateCache[key] = cache
		peerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q peerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for peers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for peers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PeerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"peers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, peerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in peer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all peer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Peer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no peers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(peerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	peerUpsertCacheMut.RLock()
	cache, cached := peerUpsertCache[key]
	peerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			peerAllColumns,
			peerColumnsWithDefault,
			peerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			peerAllColumns,
			peerPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, peerGeneratedColumns)
		update = strmangle.SetComplement(update, peerGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert peers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(peerPrimaryKeyColumns))
			copy(conflict, peerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"peers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(peerType, peerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(peerType, peerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert peers")
	}

	if !cached {
		peerUpsertCacheMut.Lock()
		peerUpsertCache[key] = cache
		peerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Peer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Peer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Peer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), peerPrimaryKeyMapping)
	sql := "DELETE FROM \"peers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from peers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for peers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q peerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no peerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from peers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for peers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PeerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(peerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"peers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, peerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from peer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for peers")
	}

	if len(peerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Peer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPeer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PeerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PeerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), peerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"peers\".* FROM \"peers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, peerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PeerSlice")
	}

	*o = slice

	return nil
}

// PeerExists checks if the Peer row exists.
func PeerExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"peers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if peers exists")
	}

	return exists, nil
}
